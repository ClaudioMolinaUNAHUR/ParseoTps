Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> START content END
Rule 2     content -> statement_list
Rule 3     statement_list -> statement_list statement
Rule 4     statement_list -> empty
Rule 5     statement -> content_no_return
Rule 6     statement -> exp
Rule 7     content_no_return -> function
Rule 8     content_no_return -> function_return
Rule 9     content_no_return -> loop
Rule 10    content_no_return -> conditional
Rule 11    content_no_return -> var
Rule 12    content_no_return -> assign
Rule 13    content_no_return -> list_assign
Rule 14    content_no_return -> add_list_item
Rule 15    content_no_return -> console
Rule 16    console -> CONSOLE LPAREN args RPAREN
Rule 17    function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE
Rule 18    function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE
Rule 19    opt_param_list -> param_list
Rule 20    opt_param_list -> empty
Rule 21    param_list -> param_list COMMA param
Rule 22    param_list -> param
Rule 23    param -> type ID opt_default
Rule 24    opt_default -> COLON exp
Rule 25    opt_default -> empty
Rule 26    call_func -> ID LPAREN args RPAREN
Rule 27    call_func -> ID LPAREN RPAREN
Rule 28    conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE
Rule 29    conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE
Rule 30    conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional
Rule 31    loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE
Rule 32    range -> RANGE LPAREN exp COMMA exp RPAREN
Rule 33    range -> RANGE LPAREN exp RPAREN
Rule 34    range -> RANGE LPAREN exp COMMA exp COMMA exp RPAREN
Rule 35    exp -> exp operator exp
Rule 36    exp -> op_bool_un exp
Rule 37    exp -> primary_exp
Rule 38    primary_exp -> call_func
Rule 39    primary_exp -> primitive
Rule 40    primary_exp -> id
Rule 41    primary_exp -> len_list_item
Rule 42    primary_exp -> remove_list_item
Rule 43    primary_exp -> read_list_item
Rule 44    primary_exp -> has_list_item
Rule 45    primary_exp -> list
Rule 46    primary_exp -> LPAREN exp RPAREN
Rule 47    var -> type ID COLON exp
Rule 48    assign -> ID COLON exp
Rule 49    args -> args COMMA exp
Rule 50    args -> exp
Rule 51    id -> ID
Rule 52    operator -> PLUS
Rule 53    operator -> MINUS
Rule 54    operator -> MULTIPLY
Rule 55    operator -> DIVIDE
Rule 56    operator -> AND
Rule 57    operator -> OR
Rule 58    operator -> LT
Rule 59    operator -> GT
Rule 60    operator -> LE
Rule 61    operator -> GE
Rule 62    operator -> EQ
Rule 63    operator -> NE
Rule 64    op_bool_un -> NOT
Rule 65    type -> STR
Rule 66    type -> NUM
Rule 67    type -> BOOL
Rule 68    type -> LIST LT type GT
Rule 69    list -> LBRACKET list_content RBRACKET
Rule 70    list -> LBRACKET RBRACKET
Rule 71    list_content -> list_content COMMA exp
Rule 72    list_content -> exp
Rule 73    add_list_item -> ADD LPAREN exp COMMA exp RPAREN
Rule 74    len_list_item -> SIZE LPAREN exp RPAREN
Rule 75    read_list_item -> id LBRACKET exp RBRACKET
Rule 76    remove_list_item -> REMOVE LPAREN exp RPAREN
Rule 77    has_list_item -> HAS LPAREN exp COMMA primitive RPAREN
Rule 78    list_assign -> id LBRACKET exp RBRACKET COLON exp
Rule 79    primitive -> NUMBER
Rule 80    primitive -> STRING
Rule 81    primitive -> TRUE
Rule 82    primitive -> FALSE
Rule 83    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 73
AND                  : 56
BOOL                 : 67
COLON                : 18 24 47 48 78
COMMA                : 21 32 34 34 49 71 73 77
COMMENT              : 
CONSOLE              : 16
DIVIDE               : 55
ELSE                 : 29 30
END                  : 1
EQ                   : 62
FALSE                : 82
FUNC                 : 17 18
GE                   : 61
GT                   : 59 68
HAS                  : 77
ID                   : 17 18 23 26 27 31 47 48 51
IF                   : 28 29 30
IN                   : 31
LBRACE               : 17 18 28 29 29 30 31
LBRACKET             : 69 70 75 78
LE                   : 60
LIST                 : 68
LOOP                 : 31
LPAREN               : 16 17 18 26 27 28 29 30 31 32 33 34 46 73 74 76 77
LT                   : 58 68
MINUS                : 53
MULTIPLY             : 54
NE                   : 63
NOT                  : 64
NUM                  : 66
NUMBER               : 79
OR                   : 57
PLUS                 : 52
RANGE                : 32 33 34
RBRACE               : 17 18 28 29 29 30 31
RBRACKET             : 69 70 75 78
REMOVE               : 76
RETURN               : 18
RPAREN               : 16 17 18 26 27 28 29 30 31 32 33 34 46 73 74 76 77
SIZE                 : 74
START                : 1
STR                  : 65
STRING               : 80
TRUE                 : 81
error                : 

Nonterminals, with rules where they appear

add_list_item        : 14
args                 : 16 26 49
assign               : 12
call_func            : 38
conditional          : 10 30
console              : 15
content              : 1 17 18 28 29 29 30 31
content_no_return    : 5
empty                : 4 20 25
exp                  : 6 18 24 28 29 30 32 32 33 34 34 34 35 35 36 46 47 48 49 50 71 72 73 73 74 75 76 77 78 78
function             : 7
function_return      : 8
has_list_item        : 44
id                   : 40 75 78
len_list_item        : 41
list                 : 45
list_assign          : 13
list_content         : 69 71
loop                 : 9
op_bool_un           : 36
operator             : 35
opt_default          : 23
opt_param_list       : 17 18
param                : 21 22
param_list           : 19 21
primary_exp          : 37
primitive            : 39 77
program              : 0
range                : 31
read_list_item       : 43
remove_list_item     : 42
statement            : 3
statement_list       : 2 3
type                 : 18 23 47 68
var                  : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . START content END

    START           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> START . content END
    (2) content -> . statement_list
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . empty
    (83) empty -> .

    FUNC            reduce using rule 83 (empty -> .)
    LOOP            reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    ADD             reduce using rule 83 (empty -> .)
    CONSOLE         reduce using rule 83 (empty -> .)
    NOT             reduce using rule 83 (empty -> .)
    LPAREN          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    NUM             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    LIST            reduce using rule 83 (empty -> .)
    NUMBER          reduce using rule 83 (empty -> .)
    STRING          reduce using rule 83 (empty -> .)
    TRUE            reduce using rule 83 (empty -> .)
    FALSE           reduce using rule 83 (empty -> .)
    SIZE            reduce using rule 83 (empty -> .)
    REMOVE          reduce using rule 83 (empty -> .)
    HAS             reduce using rule 83 (empty -> .)
    LBRACKET        reduce using rule 83 (empty -> .)
    END             reduce using rule 83 (empty -> .)

    content                        shift and go to state 3
    statement_list                 shift and go to state 4
    empty                          shift and go to state 5

state 3

    (1) program -> START content . END

    END             shift and go to state 6


state 4

    (2) content -> statement_list .
    (3) statement_list -> statement_list . statement
    (5) statement -> . content_no_return
    (6) statement -> . exp
    (7) content_no_return -> . function
    (8) content_no_return -> . function_return
    (9) content_no_return -> . loop
    (10) content_no_return -> . conditional
    (11) content_no_return -> . var
    (12) content_no_return -> . assign
    (13) content_no_return -> . list_assign
    (14) content_no_return -> . add_list_item
    (15) content_no_return -> . console
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (17) function -> . FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE
    (18) function_return -> . FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE
    (31) loop -> . LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE
    (28) conditional -> . IF LPAREN exp RPAREN LBRACE content RBRACE
    (29) conditional -> . IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> . IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional
    (47) var -> . type ID COLON exp
    (48) assign -> . ID COLON exp
    (78) list_assign -> . id LBRACKET exp RBRACKET COLON exp
    (73) add_list_item -> . ADD LPAREN exp COMMA exp RPAREN
    (16) console -> . CONSOLE LPAREN args RPAREN
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (65) type -> . STR
    (66) type -> . NUM
    (67) type -> . BOOL
    (68) type -> . LIST LT type GT
    (51) id -> . ID
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    END             reduce using rule 2 (content -> statement_list .)
    RBRACE          reduce using rule 2 (content -> statement_list .)
    RETURN          reduce using rule 2 (content -> statement_list .)
    FUNC            shift and go to state 21
    LOOP            shift and go to state 25
    IF              shift and go to state 26
    ID              shift and go to state 22
    ADD             shift and go to state 29
    CONSOLE         shift and go to state 30
    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    STR             shift and go to state 39
    NUM             shift and go to state 40
    BOOL            shift and go to state 41
    LIST            shift and go to state 42
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    statement                      shift and go to state 7
    content_no_return              shift and go to state 8
    exp                            shift and go to state 9
    function                       shift and go to state 10
    function_return                shift and go to state 11
    loop                           shift and go to state 12
    conditional                    shift and go to state 13
    var                            shift and go to state 14
    assign                         shift and go to state 15
    list_assign                    shift and go to state 16
    add_list_item                  shift and go to state 17
    console                        shift and go to state 18
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    type                           shift and go to state 24
    id                             shift and go to state 27
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 5

    (4) statement_list -> empty .

    FUNC            reduce using rule 4 (statement_list -> empty .)
    LOOP            reduce using rule 4 (statement_list -> empty .)
    IF              reduce using rule 4 (statement_list -> empty .)
    ID              reduce using rule 4 (statement_list -> empty .)
    ADD             reduce using rule 4 (statement_list -> empty .)
    CONSOLE         reduce using rule 4 (statement_list -> empty .)
    NOT             reduce using rule 4 (statement_list -> empty .)
    LPAREN          reduce using rule 4 (statement_list -> empty .)
    STR             reduce using rule 4 (statement_list -> empty .)
    NUM             reduce using rule 4 (statement_list -> empty .)
    BOOL            reduce using rule 4 (statement_list -> empty .)
    LIST            reduce using rule 4 (statement_list -> empty .)
    NUMBER          reduce using rule 4 (statement_list -> empty .)
    STRING          reduce using rule 4 (statement_list -> empty .)
    TRUE            reduce using rule 4 (statement_list -> empty .)
    FALSE           reduce using rule 4 (statement_list -> empty .)
    SIZE            reduce using rule 4 (statement_list -> empty .)
    REMOVE          reduce using rule 4 (statement_list -> empty .)
    HAS             reduce using rule 4 (statement_list -> empty .)
    LBRACKET        reduce using rule 4 (statement_list -> empty .)
    END             reduce using rule 4 (statement_list -> empty .)
    RBRACE          reduce using rule 4 (statement_list -> empty .)
    RETURN          reduce using rule 4 (statement_list -> empty .)


state 6

    (1) program -> START content END .

    $end            reduce using rule 1 (program -> START content END .)


state 7

    (3) statement_list -> statement_list statement .

    FUNC            reduce using rule 3 (statement_list -> statement_list statement .)
    LOOP            reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    ADD             reduce using rule 3 (statement_list -> statement_list statement .)
    CONSOLE         reduce using rule 3 (statement_list -> statement_list statement .)
    NOT             reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    STR             reduce using rule 3 (statement_list -> statement_list statement .)
    NUM             reduce using rule 3 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 3 (statement_list -> statement_list statement .)
    LIST            reduce using rule 3 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement_list statement .)
    STRING          reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    SIZE            reduce using rule 3 (statement_list -> statement_list statement .)
    REMOVE          reduce using rule 3 (statement_list -> statement_list statement .)
    HAS             reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 3 (statement_list -> statement_list statement .)
    END             reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)


state 8

    (5) statement -> content_no_return .

    FUNC            reduce using rule 5 (statement -> content_no_return .)
    LOOP            reduce using rule 5 (statement -> content_no_return .)
    IF              reduce using rule 5 (statement -> content_no_return .)
    ID              reduce using rule 5 (statement -> content_no_return .)
    ADD             reduce using rule 5 (statement -> content_no_return .)
    CONSOLE         reduce using rule 5 (statement -> content_no_return .)
    NOT             reduce using rule 5 (statement -> content_no_return .)
    LPAREN          reduce using rule 5 (statement -> content_no_return .)
    STR             reduce using rule 5 (statement -> content_no_return .)
    NUM             reduce using rule 5 (statement -> content_no_return .)
    BOOL            reduce using rule 5 (statement -> content_no_return .)
    LIST            reduce using rule 5 (statement -> content_no_return .)
    NUMBER          reduce using rule 5 (statement -> content_no_return .)
    STRING          reduce using rule 5 (statement -> content_no_return .)
    TRUE            reduce using rule 5 (statement -> content_no_return .)
    FALSE           reduce using rule 5 (statement -> content_no_return .)
    SIZE            reduce using rule 5 (statement -> content_no_return .)
    REMOVE          reduce using rule 5 (statement -> content_no_return .)
    HAS             reduce using rule 5 (statement -> content_no_return .)
    LBRACKET        reduce using rule 5 (statement -> content_no_return .)
    END             reduce using rule 5 (statement -> content_no_return .)
    RBRACE          reduce using rule 5 (statement -> content_no_return .)
    RETURN          reduce using rule 5 (statement -> content_no_return .)


state 9

    (6) statement -> exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    FUNC            reduce using rule 6 (statement -> exp .)
    LOOP            reduce using rule 6 (statement -> exp .)
    IF              reduce using rule 6 (statement -> exp .)
    ID              reduce using rule 6 (statement -> exp .)
    ADD             reduce using rule 6 (statement -> exp .)
    CONSOLE         reduce using rule 6 (statement -> exp .)
    NOT             reduce using rule 6 (statement -> exp .)
    LPAREN          reduce using rule 6 (statement -> exp .)
    STR             reduce using rule 6 (statement -> exp .)
    NUM             reduce using rule 6 (statement -> exp .)
    BOOL            reduce using rule 6 (statement -> exp .)
    LIST            reduce using rule 6 (statement -> exp .)
    NUMBER          reduce using rule 6 (statement -> exp .)
    STRING          reduce using rule 6 (statement -> exp .)
    TRUE            reduce using rule 6 (statement -> exp .)
    FALSE           reduce using rule 6 (statement -> exp .)
    SIZE            reduce using rule 6 (statement -> exp .)
    REMOVE          reduce using rule 6 (statement -> exp .)
    HAS             reduce using rule 6 (statement -> exp .)
    LBRACKET        reduce using rule 6 (statement -> exp .)
    END             reduce using rule 6 (statement -> exp .)
    RBRACE          reduce using rule 6 (statement -> exp .)
    RETURN          reduce using rule 6 (statement -> exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 10

    (7) content_no_return -> function .

    FUNC            reduce using rule 7 (content_no_return -> function .)
    LOOP            reduce using rule 7 (content_no_return -> function .)
    IF              reduce using rule 7 (content_no_return -> function .)
    ID              reduce using rule 7 (content_no_return -> function .)
    ADD             reduce using rule 7 (content_no_return -> function .)
    CONSOLE         reduce using rule 7 (content_no_return -> function .)
    NOT             reduce using rule 7 (content_no_return -> function .)
    LPAREN          reduce using rule 7 (content_no_return -> function .)
    STR             reduce using rule 7 (content_no_return -> function .)
    NUM             reduce using rule 7 (content_no_return -> function .)
    BOOL            reduce using rule 7 (content_no_return -> function .)
    LIST            reduce using rule 7 (content_no_return -> function .)
    NUMBER          reduce using rule 7 (content_no_return -> function .)
    STRING          reduce using rule 7 (content_no_return -> function .)
    TRUE            reduce using rule 7 (content_no_return -> function .)
    FALSE           reduce using rule 7 (content_no_return -> function .)
    SIZE            reduce using rule 7 (content_no_return -> function .)
    REMOVE          reduce using rule 7 (content_no_return -> function .)
    HAS             reduce using rule 7 (content_no_return -> function .)
    LBRACKET        reduce using rule 7 (content_no_return -> function .)
    END             reduce using rule 7 (content_no_return -> function .)
    RBRACE          reduce using rule 7 (content_no_return -> function .)
    RETURN          reduce using rule 7 (content_no_return -> function .)


state 11

    (8) content_no_return -> function_return .

    FUNC            reduce using rule 8 (content_no_return -> function_return .)
    LOOP            reduce using rule 8 (content_no_return -> function_return .)
    IF              reduce using rule 8 (content_no_return -> function_return .)
    ID              reduce using rule 8 (content_no_return -> function_return .)
    ADD             reduce using rule 8 (content_no_return -> function_return .)
    CONSOLE         reduce using rule 8 (content_no_return -> function_return .)
    NOT             reduce using rule 8 (content_no_return -> function_return .)
    LPAREN          reduce using rule 8 (content_no_return -> function_return .)
    STR             reduce using rule 8 (content_no_return -> function_return .)
    NUM             reduce using rule 8 (content_no_return -> function_return .)
    BOOL            reduce using rule 8 (content_no_return -> function_return .)
    LIST            reduce using rule 8 (content_no_return -> function_return .)
    NUMBER          reduce using rule 8 (content_no_return -> function_return .)
    STRING          reduce using rule 8 (content_no_return -> function_return .)
    TRUE            reduce using rule 8 (content_no_return -> function_return .)
    FALSE           reduce using rule 8 (content_no_return -> function_return .)
    SIZE            reduce using rule 8 (content_no_return -> function_return .)
    REMOVE          reduce using rule 8 (content_no_return -> function_return .)
    HAS             reduce using rule 8 (content_no_return -> function_return .)
    LBRACKET        reduce using rule 8 (content_no_return -> function_return .)
    END             reduce using rule 8 (content_no_return -> function_return .)
    RBRACE          reduce using rule 8 (content_no_return -> function_return .)
    RETURN          reduce using rule 8 (content_no_return -> function_return .)


state 12

    (9) content_no_return -> loop .

    FUNC            reduce using rule 9 (content_no_return -> loop .)
    LOOP            reduce using rule 9 (content_no_return -> loop .)
    IF              reduce using rule 9 (content_no_return -> loop .)
    ID              reduce using rule 9 (content_no_return -> loop .)
    ADD             reduce using rule 9 (content_no_return -> loop .)
    CONSOLE         reduce using rule 9 (content_no_return -> loop .)
    NOT             reduce using rule 9 (content_no_return -> loop .)
    LPAREN          reduce using rule 9 (content_no_return -> loop .)
    STR             reduce using rule 9 (content_no_return -> loop .)
    NUM             reduce using rule 9 (content_no_return -> loop .)
    BOOL            reduce using rule 9 (content_no_return -> loop .)
    LIST            reduce using rule 9 (content_no_return -> loop .)
    NUMBER          reduce using rule 9 (content_no_return -> loop .)
    STRING          reduce using rule 9 (content_no_return -> loop .)
    TRUE            reduce using rule 9 (content_no_return -> loop .)
    FALSE           reduce using rule 9 (content_no_return -> loop .)
    SIZE            reduce using rule 9 (content_no_return -> loop .)
    REMOVE          reduce using rule 9 (content_no_return -> loop .)
    HAS             reduce using rule 9 (content_no_return -> loop .)
    LBRACKET        reduce using rule 9 (content_no_return -> loop .)
    END             reduce using rule 9 (content_no_return -> loop .)
    RBRACE          reduce using rule 9 (content_no_return -> loop .)
    RETURN          reduce using rule 9 (content_no_return -> loop .)


state 13

    (10) content_no_return -> conditional .

    FUNC            reduce using rule 10 (content_no_return -> conditional .)
    LOOP            reduce using rule 10 (content_no_return -> conditional .)
    IF              reduce using rule 10 (content_no_return -> conditional .)
    ID              reduce using rule 10 (content_no_return -> conditional .)
    ADD             reduce using rule 10 (content_no_return -> conditional .)
    CONSOLE         reduce using rule 10 (content_no_return -> conditional .)
    NOT             reduce using rule 10 (content_no_return -> conditional .)
    LPAREN          reduce using rule 10 (content_no_return -> conditional .)
    STR             reduce using rule 10 (content_no_return -> conditional .)
    NUM             reduce using rule 10 (content_no_return -> conditional .)
    BOOL            reduce using rule 10 (content_no_return -> conditional .)
    LIST            reduce using rule 10 (content_no_return -> conditional .)
    NUMBER          reduce using rule 10 (content_no_return -> conditional .)
    STRING          reduce using rule 10 (content_no_return -> conditional .)
    TRUE            reduce using rule 10 (content_no_return -> conditional .)
    FALSE           reduce using rule 10 (content_no_return -> conditional .)
    SIZE            reduce using rule 10 (content_no_return -> conditional .)
    REMOVE          reduce using rule 10 (content_no_return -> conditional .)
    HAS             reduce using rule 10 (content_no_return -> conditional .)
    LBRACKET        reduce using rule 10 (content_no_return -> conditional .)
    END             reduce using rule 10 (content_no_return -> conditional .)
    RBRACE          reduce using rule 10 (content_no_return -> conditional .)
    RETURN          reduce using rule 10 (content_no_return -> conditional .)


state 14

    (11) content_no_return -> var .

    FUNC            reduce using rule 11 (content_no_return -> var .)
    LOOP            reduce using rule 11 (content_no_return -> var .)
    IF              reduce using rule 11 (content_no_return -> var .)
    ID              reduce using rule 11 (content_no_return -> var .)
    ADD             reduce using rule 11 (content_no_return -> var .)
    CONSOLE         reduce using rule 11 (content_no_return -> var .)
    NOT             reduce using rule 11 (content_no_return -> var .)
    LPAREN          reduce using rule 11 (content_no_return -> var .)
    STR             reduce using rule 11 (content_no_return -> var .)
    NUM             reduce using rule 11 (content_no_return -> var .)
    BOOL            reduce using rule 11 (content_no_return -> var .)
    LIST            reduce using rule 11 (content_no_return -> var .)
    NUMBER          reduce using rule 11 (content_no_return -> var .)
    STRING          reduce using rule 11 (content_no_return -> var .)
    TRUE            reduce using rule 11 (content_no_return -> var .)
    FALSE           reduce using rule 11 (content_no_return -> var .)
    SIZE            reduce using rule 11 (content_no_return -> var .)
    REMOVE          reduce using rule 11 (content_no_return -> var .)
    HAS             reduce using rule 11 (content_no_return -> var .)
    LBRACKET        reduce using rule 11 (content_no_return -> var .)
    END             reduce using rule 11 (content_no_return -> var .)
    RBRACE          reduce using rule 11 (content_no_return -> var .)
    RETURN          reduce using rule 11 (content_no_return -> var .)


state 15

    (12) content_no_return -> assign .

    FUNC            reduce using rule 12 (content_no_return -> assign .)
    LOOP            reduce using rule 12 (content_no_return -> assign .)
    IF              reduce using rule 12 (content_no_return -> assign .)
    ID              reduce using rule 12 (content_no_return -> assign .)
    ADD             reduce using rule 12 (content_no_return -> assign .)
    CONSOLE         reduce using rule 12 (content_no_return -> assign .)
    NOT             reduce using rule 12 (content_no_return -> assign .)
    LPAREN          reduce using rule 12 (content_no_return -> assign .)
    STR             reduce using rule 12 (content_no_return -> assign .)
    NUM             reduce using rule 12 (content_no_return -> assign .)
    BOOL            reduce using rule 12 (content_no_return -> assign .)
    LIST            reduce using rule 12 (content_no_return -> assign .)
    NUMBER          reduce using rule 12 (content_no_return -> assign .)
    STRING          reduce using rule 12 (content_no_return -> assign .)
    TRUE            reduce using rule 12 (content_no_return -> assign .)
    FALSE           reduce using rule 12 (content_no_return -> assign .)
    SIZE            reduce using rule 12 (content_no_return -> assign .)
    REMOVE          reduce using rule 12 (content_no_return -> assign .)
    HAS             reduce using rule 12 (content_no_return -> assign .)
    LBRACKET        reduce using rule 12 (content_no_return -> assign .)
    END             reduce using rule 12 (content_no_return -> assign .)
    RBRACE          reduce using rule 12 (content_no_return -> assign .)
    RETURN          reduce using rule 12 (content_no_return -> assign .)


state 16

    (13) content_no_return -> list_assign .

    FUNC            reduce using rule 13 (content_no_return -> list_assign .)
    LOOP            reduce using rule 13 (content_no_return -> list_assign .)
    IF              reduce using rule 13 (content_no_return -> list_assign .)
    ID              reduce using rule 13 (content_no_return -> list_assign .)
    ADD             reduce using rule 13 (content_no_return -> list_assign .)
    CONSOLE         reduce using rule 13 (content_no_return -> list_assign .)
    NOT             reduce using rule 13 (content_no_return -> list_assign .)
    LPAREN          reduce using rule 13 (content_no_return -> list_assign .)
    STR             reduce using rule 13 (content_no_return -> list_assign .)
    NUM             reduce using rule 13 (content_no_return -> list_assign .)
    BOOL            reduce using rule 13 (content_no_return -> list_assign .)
    LIST            reduce using rule 13 (content_no_return -> list_assign .)
    NUMBER          reduce using rule 13 (content_no_return -> list_assign .)
    STRING          reduce using rule 13 (content_no_return -> list_assign .)
    TRUE            reduce using rule 13 (content_no_return -> list_assign .)
    FALSE           reduce using rule 13 (content_no_return -> list_assign .)
    SIZE            reduce using rule 13 (content_no_return -> list_assign .)
    REMOVE          reduce using rule 13 (content_no_return -> list_assign .)
    HAS             reduce using rule 13 (content_no_return -> list_assign .)
    LBRACKET        reduce using rule 13 (content_no_return -> list_assign .)
    END             reduce using rule 13 (content_no_return -> list_assign .)
    RBRACE          reduce using rule 13 (content_no_return -> list_assign .)
    RETURN          reduce using rule 13 (content_no_return -> list_assign .)


state 17

    (14) content_no_return -> add_list_item .

    FUNC            reduce using rule 14 (content_no_return -> add_list_item .)
    LOOP            reduce using rule 14 (content_no_return -> add_list_item .)
    IF              reduce using rule 14 (content_no_return -> add_list_item .)
    ID              reduce using rule 14 (content_no_return -> add_list_item .)
    ADD             reduce using rule 14 (content_no_return -> add_list_item .)
    CONSOLE         reduce using rule 14 (content_no_return -> add_list_item .)
    NOT             reduce using rule 14 (content_no_return -> add_list_item .)
    LPAREN          reduce using rule 14 (content_no_return -> add_list_item .)
    STR             reduce using rule 14 (content_no_return -> add_list_item .)
    NUM             reduce using rule 14 (content_no_return -> add_list_item .)
    BOOL            reduce using rule 14 (content_no_return -> add_list_item .)
    LIST            reduce using rule 14 (content_no_return -> add_list_item .)
    NUMBER          reduce using rule 14 (content_no_return -> add_list_item .)
    STRING          reduce using rule 14 (content_no_return -> add_list_item .)
    TRUE            reduce using rule 14 (content_no_return -> add_list_item .)
    FALSE           reduce using rule 14 (content_no_return -> add_list_item .)
    SIZE            reduce using rule 14 (content_no_return -> add_list_item .)
    REMOVE          reduce using rule 14 (content_no_return -> add_list_item .)
    HAS             reduce using rule 14 (content_no_return -> add_list_item .)
    LBRACKET        reduce using rule 14 (content_no_return -> add_list_item .)
    END             reduce using rule 14 (content_no_return -> add_list_item .)
    RBRACE          reduce using rule 14 (content_no_return -> add_list_item .)
    RETURN          reduce using rule 14 (content_no_return -> add_list_item .)


state 18

    (15) content_no_return -> console .

    FUNC            reduce using rule 15 (content_no_return -> console .)
    LOOP            reduce using rule 15 (content_no_return -> console .)
    IF              reduce using rule 15 (content_no_return -> console .)
    ID              reduce using rule 15 (content_no_return -> console .)
    ADD             reduce using rule 15 (content_no_return -> console .)
    CONSOLE         reduce using rule 15 (content_no_return -> console .)
    NOT             reduce using rule 15 (content_no_return -> console .)
    LPAREN          reduce using rule 15 (content_no_return -> console .)
    STR             reduce using rule 15 (content_no_return -> console .)
    NUM             reduce using rule 15 (content_no_return -> console .)
    BOOL            reduce using rule 15 (content_no_return -> console .)
    LIST            reduce using rule 15 (content_no_return -> console .)
    NUMBER          reduce using rule 15 (content_no_return -> console .)
    STRING          reduce using rule 15 (content_no_return -> console .)
    TRUE            reduce using rule 15 (content_no_return -> console .)
    FALSE           reduce using rule 15 (content_no_return -> console .)
    SIZE            reduce using rule 15 (content_no_return -> console .)
    REMOVE          reduce using rule 15 (content_no_return -> console .)
    HAS             reduce using rule 15 (content_no_return -> console .)
    LBRACKET        reduce using rule 15 (content_no_return -> console .)
    END             reduce using rule 15 (content_no_return -> console .)
    RBRACE          reduce using rule 15 (content_no_return -> console .)
    RETURN          reduce using rule 15 (content_no_return -> console .)


state 19

    (36) exp -> op_bool_un . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    op_bool_un                     shift and go to state 19
    exp                            shift and go to state 63
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 20

    (37) exp -> primary_exp .

    PLUS            reduce using rule 37 (exp -> primary_exp .)
    MINUS           reduce using rule 37 (exp -> primary_exp .)
    MULTIPLY        reduce using rule 37 (exp -> primary_exp .)
    DIVIDE          reduce using rule 37 (exp -> primary_exp .)
    AND             reduce using rule 37 (exp -> primary_exp .)
    OR              reduce using rule 37 (exp -> primary_exp .)
    LT              reduce using rule 37 (exp -> primary_exp .)
    GT              reduce using rule 37 (exp -> primary_exp .)
    LE              reduce using rule 37 (exp -> primary_exp .)
    GE              reduce using rule 37 (exp -> primary_exp .)
    EQ              reduce using rule 37 (exp -> primary_exp .)
    NE              reduce using rule 37 (exp -> primary_exp .)
    FUNC            reduce using rule 37 (exp -> primary_exp .)
    LOOP            reduce using rule 37 (exp -> primary_exp .)
    IF              reduce using rule 37 (exp -> primary_exp .)
    ID              reduce using rule 37 (exp -> primary_exp .)
    ADD             reduce using rule 37 (exp -> primary_exp .)
    CONSOLE         reduce using rule 37 (exp -> primary_exp .)
    NOT             reduce using rule 37 (exp -> primary_exp .)
    LPAREN          reduce using rule 37 (exp -> primary_exp .)
    STR             reduce using rule 37 (exp -> primary_exp .)
    NUM             reduce using rule 37 (exp -> primary_exp .)
    BOOL            reduce using rule 37 (exp -> primary_exp .)
    LIST            reduce using rule 37 (exp -> primary_exp .)
    NUMBER          reduce using rule 37 (exp -> primary_exp .)
    STRING          reduce using rule 37 (exp -> primary_exp .)
    TRUE            reduce using rule 37 (exp -> primary_exp .)
    FALSE           reduce using rule 37 (exp -> primary_exp .)
    SIZE            reduce using rule 37 (exp -> primary_exp .)
    REMOVE          reduce using rule 37 (exp -> primary_exp .)
    HAS             reduce using rule 37 (exp -> primary_exp .)
    LBRACKET        reduce using rule 37 (exp -> primary_exp .)
    END             reduce using rule 37 (exp -> primary_exp .)
    RBRACE          reduce using rule 37 (exp -> primary_exp .)
    RETURN          reduce using rule 37 (exp -> primary_exp .)
    RPAREN          reduce using rule 37 (exp -> primary_exp .)
    RBRACKET        reduce using rule 37 (exp -> primary_exp .)
    COMMA           reduce using rule 37 (exp -> primary_exp .)


state 21

    (17) function -> FUNC . ID LPAREN opt_param_list RPAREN LBRACE content RBRACE
    (18) function_return -> FUNC . ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE

    ID              shift and go to state 66


state 22

    (48) assign -> ID . COLON exp
    (51) id -> ID .
    (26) call_func -> ID . LPAREN args RPAREN
    (27) call_func -> ID . LPAREN RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    COLON           shift and go to state 67
    LBRACKET        reduce using rule 51 (id -> ID .)
    PLUS            reduce using rule 51 (id -> ID .)
    MINUS           reduce using rule 51 (id -> ID .)
    MULTIPLY        reduce using rule 51 (id -> ID .)
    DIVIDE          reduce using rule 51 (id -> ID .)
    AND             reduce using rule 51 (id -> ID .)
    OR              reduce using rule 51 (id -> ID .)
    LT              reduce using rule 51 (id -> ID .)
    GT              reduce using rule 51 (id -> ID .)
    LE              reduce using rule 51 (id -> ID .)
    GE              reduce using rule 51 (id -> ID .)
    EQ              reduce using rule 51 (id -> ID .)
    NE              reduce using rule 51 (id -> ID .)
    FUNC            reduce using rule 51 (id -> ID .)
    LOOP            reduce using rule 51 (id -> ID .)
    IF              reduce using rule 51 (id -> ID .)
    ID              reduce using rule 51 (id -> ID .)
    ADD             reduce using rule 51 (id -> ID .)
    CONSOLE         reduce using rule 51 (id -> ID .)
    NOT             reduce using rule 51 (id -> ID .)
    STR             reduce using rule 51 (id -> ID .)
    NUM             reduce using rule 51 (id -> ID .)
    BOOL            reduce using rule 51 (id -> ID .)
    LIST            reduce using rule 51 (id -> ID .)
    NUMBER          reduce using rule 51 (id -> ID .)
    STRING          reduce using rule 51 (id -> ID .)
    TRUE            reduce using rule 51 (id -> ID .)
    FALSE           reduce using rule 51 (id -> ID .)
    SIZE            reduce using rule 51 (id -> ID .)
    REMOVE          reduce using rule 51 (id -> ID .)
    HAS             reduce using rule 51 (id -> ID .)
    END             reduce using rule 51 (id -> ID .)
    RBRACE          reduce using rule 51 (id -> ID .)
    RETURN          reduce using rule 51 (id -> ID .)
    LPAREN          shift and go to state 68

  ! LPAREN          [ reduce using rule 51 (id -> ID .) ]


state 23

    (46) primary_exp -> LPAREN . exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 69
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 24

    (47) var -> type . ID COLON exp

    ID              shift and go to state 70


state 25

    (31) loop -> LOOP . LPAREN ID IN range RPAREN LBRACE content RBRACE

    LPAREN          shift and go to state 71


state 26

    (28) conditional -> IF . LPAREN exp RPAREN LBRACE content RBRACE
    (29) conditional -> IF . LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> IF . LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional

    LPAREN          shift and go to state 72


state 27

    (78) list_assign -> id . LBRACKET exp RBRACKET COLON exp
    (40) primary_exp -> id .
    (75) read_list_item -> id . LBRACKET exp RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 73
    PLUS            reduce using rule 40 (primary_exp -> id .)
    MINUS           reduce using rule 40 (primary_exp -> id .)
    MULTIPLY        reduce using rule 40 (primary_exp -> id .)
    DIVIDE          reduce using rule 40 (primary_exp -> id .)
    AND             reduce using rule 40 (primary_exp -> id .)
    OR              reduce using rule 40 (primary_exp -> id .)
    LT              reduce using rule 40 (primary_exp -> id .)
    GT              reduce using rule 40 (primary_exp -> id .)
    LE              reduce using rule 40 (primary_exp -> id .)
    GE              reduce using rule 40 (primary_exp -> id .)
    EQ              reduce using rule 40 (primary_exp -> id .)
    NE              reduce using rule 40 (primary_exp -> id .)
    FUNC            reduce using rule 40 (primary_exp -> id .)
    LOOP            reduce using rule 40 (primary_exp -> id .)
    IF              reduce using rule 40 (primary_exp -> id .)
    ID              reduce using rule 40 (primary_exp -> id .)
    ADD             reduce using rule 40 (primary_exp -> id .)
    CONSOLE         reduce using rule 40 (primary_exp -> id .)
    NOT             reduce using rule 40 (primary_exp -> id .)
    LPAREN          reduce using rule 40 (primary_exp -> id .)
    STR             reduce using rule 40 (primary_exp -> id .)
    NUM             reduce using rule 40 (primary_exp -> id .)
    BOOL            reduce using rule 40 (primary_exp -> id .)
    LIST            reduce using rule 40 (primary_exp -> id .)
    NUMBER          reduce using rule 40 (primary_exp -> id .)
    STRING          reduce using rule 40 (primary_exp -> id .)
    TRUE            reduce using rule 40 (primary_exp -> id .)
    FALSE           reduce using rule 40 (primary_exp -> id .)
    SIZE            reduce using rule 40 (primary_exp -> id .)
    REMOVE          reduce using rule 40 (primary_exp -> id .)
    HAS             reduce using rule 40 (primary_exp -> id .)
    END             reduce using rule 40 (primary_exp -> id .)
    RBRACE          reduce using rule 40 (primary_exp -> id .)
    RETURN          reduce using rule 40 (primary_exp -> id .)

  ! LBRACKET        [ reduce using rule 40 (primary_exp -> id .) ]


state 28

    (69) list -> LBRACKET . list_content RBRACKET
    (70) list -> LBRACKET . RBRACKET
    (71) list_content -> . list_content COMMA exp
    (72) list_content -> . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    RBRACKET        shift and go to state 75
    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    list_content                   shift and go to state 74
    exp                            shift and go to state 76
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 29

    (73) add_list_item -> ADD . LPAREN exp COMMA exp RPAREN

    LPAREN          shift and go to state 77


state 30

    (16) console -> CONSOLE . LPAREN args RPAREN

    LPAREN          shift and go to state 78


state 31

    (64) op_bool_un -> NOT .

    NOT             reduce using rule 64 (op_bool_un -> NOT .)
    LPAREN          reduce using rule 64 (op_bool_un -> NOT .)
    ID              reduce using rule 64 (op_bool_un -> NOT .)
    NUMBER          reduce using rule 64 (op_bool_un -> NOT .)
    STRING          reduce using rule 64 (op_bool_un -> NOT .)
    TRUE            reduce using rule 64 (op_bool_un -> NOT .)
    FALSE           reduce using rule 64 (op_bool_un -> NOT .)
    SIZE            reduce using rule 64 (op_bool_un -> NOT .)
    REMOVE          reduce using rule 64 (op_bool_un -> NOT .)
    HAS             reduce using rule 64 (op_bool_un -> NOT .)
    LBRACKET        reduce using rule 64 (op_bool_un -> NOT .)


state 32

    (38) primary_exp -> call_func .

    PLUS            reduce using rule 38 (primary_exp -> call_func .)
    MINUS           reduce using rule 38 (primary_exp -> call_func .)
    MULTIPLY        reduce using rule 38 (primary_exp -> call_func .)
    DIVIDE          reduce using rule 38 (primary_exp -> call_func .)
    AND             reduce using rule 38 (primary_exp -> call_func .)
    OR              reduce using rule 38 (primary_exp -> call_func .)
    LT              reduce using rule 38 (primary_exp -> call_func .)
    GT              reduce using rule 38 (primary_exp -> call_func .)
    LE              reduce using rule 38 (primary_exp -> call_func .)
    GE              reduce using rule 38 (primary_exp -> call_func .)
    EQ              reduce using rule 38 (primary_exp -> call_func .)
    NE              reduce using rule 38 (primary_exp -> call_func .)
    FUNC            reduce using rule 38 (primary_exp -> call_func .)
    LOOP            reduce using rule 38 (primary_exp -> call_func .)
    IF              reduce using rule 38 (primary_exp -> call_func .)
    ID              reduce using rule 38 (primary_exp -> call_func .)
    ADD             reduce using rule 38 (primary_exp -> call_func .)
    CONSOLE         reduce using rule 38 (primary_exp -> call_func .)
    NOT             reduce using rule 38 (primary_exp -> call_func .)
    LPAREN          reduce using rule 38 (primary_exp -> call_func .)
    STR             reduce using rule 38 (primary_exp -> call_func .)
    NUM             reduce using rule 38 (primary_exp -> call_func .)
    BOOL            reduce using rule 38 (primary_exp -> call_func .)
    LIST            reduce using rule 38 (primary_exp -> call_func .)
    NUMBER          reduce using rule 38 (primary_exp -> call_func .)
    STRING          reduce using rule 38 (primary_exp -> call_func .)
    TRUE            reduce using rule 38 (primary_exp -> call_func .)
    FALSE           reduce using rule 38 (primary_exp -> call_func .)
    SIZE            reduce using rule 38 (primary_exp -> call_func .)
    REMOVE          reduce using rule 38 (primary_exp -> call_func .)
    HAS             reduce using rule 38 (primary_exp -> call_func .)
    LBRACKET        reduce using rule 38 (primary_exp -> call_func .)
    END             reduce using rule 38 (primary_exp -> call_func .)
    RBRACE          reduce using rule 38 (primary_exp -> call_func .)
    RETURN          reduce using rule 38 (primary_exp -> call_func .)
    RPAREN          reduce using rule 38 (primary_exp -> call_func .)
    RBRACKET        reduce using rule 38 (primary_exp -> call_func .)
    COMMA           reduce using rule 38 (primary_exp -> call_func .)


state 33

    (39) primary_exp -> primitive .

    PLUS            reduce using rule 39 (primary_exp -> primitive .)
    MINUS           reduce using rule 39 (primary_exp -> primitive .)
    MULTIPLY        reduce using rule 39 (primary_exp -> primitive .)
    DIVIDE          reduce using rule 39 (primary_exp -> primitive .)
    AND             reduce using rule 39 (primary_exp -> primitive .)
    OR              reduce using rule 39 (primary_exp -> primitive .)
    LT              reduce using rule 39 (primary_exp -> primitive .)
    GT              reduce using rule 39 (primary_exp -> primitive .)
    LE              reduce using rule 39 (primary_exp -> primitive .)
    GE              reduce using rule 39 (primary_exp -> primitive .)
    EQ              reduce using rule 39 (primary_exp -> primitive .)
    NE              reduce using rule 39 (primary_exp -> primitive .)
    FUNC            reduce using rule 39 (primary_exp -> primitive .)
    LOOP            reduce using rule 39 (primary_exp -> primitive .)
    IF              reduce using rule 39 (primary_exp -> primitive .)
    ID              reduce using rule 39 (primary_exp -> primitive .)
    ADD             reduce using rule 39 (primary_exp -> primitive .)
    CONSOLE         reduce using rule 39 (primary_exp -> primitive .)
    NOT             reduce using rule 39 (primary_exp -> primitive .)
    LPAREN          reduce using rule 39 (primary_exp -> primitive .)
    STR             reduce using rule 39 (primary_exp -> primitive .)
    NUM             reduce using rule 39 (primary_exp -> primitive .)
    BOOL            reduce using rule 39 (primary_exp -> primitive .)
    LIST            reduce using rule 39 (primary_exp -> primitive .)
    NUMBER          reduce using rule 39 (primary_exp -> primitive .)
    STRING          reduce using rule 39 (primary_exp -> primitive .)
    TRUE            reduce using rule 39 (primary_exp -> primitive .)
    FALSE           reduce using rule 39 (primary_exp -> primitive .)
    SIZE            reduce using rule 39 (primary_exp -> primitive .)
    REMOVE          reduce using rule 39 (primary_exp -> primitive .)
    HAS             reduce using rule 39 (primary_exp -> primitive .)
    LBRACKET        reduce using rule 39 (primary_exp -> primitive .)
    END             reduce using rule 39 (primary_exp -> primitive .)
    RBRACE          reduce using rule 39 (primary_exp -> primitive .)
    RETURN          reduce using rule 39 (primary_exp -> primitive .)
    RPAREN          reduce using rule 39 (primary_exp -> primitive .)
    RBRACKET        reduce using rule 39 (primary_exp -> primitive .)
    COMMA           reduce using rule 39 (primary_exp -> primitive .)


state 34

    (41) primary_exp -> len_list_item .

    PLUS            reduce using rule 41 (primary_exp -> len_list_item .)
    MINUS           reduce using rule 41 (primary_exp -> len_list_item .)
    MULTIPLY        reduce using rule 41 (primary_exp -> len_list_item .)
    DIVIDE          reduce using rule 41 (primary_exp -> len_list_item .)
    AND             reduce using rule 41 (primary_exp -> len_list_item .)
    OR              reduce using rule 41 (primary_exp -> len_list_item .)
    LT              reduce using rule 41 (primary_exp -> len_list_item .)
    GT              reduce using rule 41 (primary_exp -> len_list_item .)
    LE              reduce using rule 41 (primary_exp -> len_list_item .)
    GE              reduce using rule 41 (primary_exp -> len_list_item .)
    EQ              reduce using rule 41 (primary_exp -> len_list_item .)
    NE              reduce using rule 41 (primary_exp -> len_list_item .)
    FUNC            reduce using rule 41 (primary_exp -> len_list_item .)
    LOOP            reduce using rule 41 (primary_exp -> len_list_item .)
    IF              reduce using rule 41 (primary_exp -> len_list_item .)
    ID              reduce using rule 41 (primary_exp -> len_list_item .)
    ADD             reduce using rule 41 (primary_exp -> len_list_item .)
    CONSOLE         reduce using rule 41 (primary_exp -> len_list_item .)
    NOT             reduce using rule 41 (primary_exp -> len_list_item .)
    LPAREN          reduce using rule 41 (primary_exp -> len_list_item .)
    STR             reduce using rule 41 (primary_exp -> len_list_item .)
    NUM             reduce using rule 41 (primary_exp -> len_list_item .)
    BOOL            reduce using rule 41 (primary_exp -> len_list_item .)
    LIST            reduce using rule 41 (primary_exp -> len_list_item .)
    NUMBER          reduce using rule 41 (primary_exp -> len_list_item .)
    STRING          reduce using rule 41 (primary_exp -> len_list_item .)
    TRUE            reduce using rule 41 (primary_exp -> len_list_item .)
    FALSE           reduce using rule 41 (primary_exp -> len_list_item .)
    SIZE            reduce using rule 41 (primary_exp -> len_list_item .)
    REMOVE          reduce using rule 41 (primary_exp -> len_list_item .)
    HAS             reduce using rule 41 (primary_exp -> len_list_item .)
    LBRACKET        reduce using rule 41 (primary_exp -> len_list_item .)
    END             reduce using rule 41 (primary_exp -> len_list_item .)
    RBRACE          reduce using rule 41 (primary_exp -> len_list_item .)
    RETURN          reduce using rule 41 (primary_exp -> len_list_item .)
    RPAREN          reduce using rule 41 (primary_exp -> len_list_item .)
    RBRACKET        reduce using rule 41 (primary_exp -> len_list_item .)
    COMMA           reduce using rule 41 (primary_exp -> len_list_item .)


state 35

    (42) primary_exp -> remove_list_item .

    PLUS            reduce using rule 42 (primary_exp -> remove_list_item .)
    MINUS           reduce using rule 42 (primary_exp -> remove_list_item .)
    MULTIPLY        reduce using rule 42 (primary_exp -> remove_list_item .)
    DIVIDE          reduce using rule 42 (primary_exp -> remove_list_item .)
    AND             reduce using rule 42 (primary_exp -> remove_list_item .)
    OR              reduce using rule 42 (primary_exp -> remove_list_item .)
    LT              reduce using rule 42 (primary_exp -> remove_list_item .)
    GT              reduce using rule 42 (primary_exp -> remove_list_item .)
    LE              reduce using rule 42 (primary_exp -> remove_list_item .)
    GE              reduce using rule 42 (primary_exp -> remove_list_item .)
    EQ              reduce using rule 42 (primary_exp -> remove_list_item .)
    NE              reduce using rule 42 (primary_exp -> remove_list_item .)
    FUNC            reduce using rule 42 (primary_exp -> remove_list_item .)
    LOOP            reduce using rule 42 (primary_exp -> remove_list_item .)
    IF              reduce using rule 42 (primary_exp -> remove_list_item .)
    ID              reduce using rule 42 (primary_exp -> remove_list_item .)
    ADD             reduce using rule 42 (primary_exp -> remove_list_item .)
    CONSOLE         reduce using rule 42 (primary_exp -> remove_list_item .)
    NOT             reduce using rule 42 (primary_exp -> remove_list_item .)
    LPAREN          reduce using rule 42 (primary_exp -> remove_list_item .)
    STR             reduce using rule 42 (primary_exp -> remove_list_item .)
    NUM             reduce using rule 42 (primary_exp -> remove_list_item .)
    BOOL            reduce using rule 42 (primary_exp -> remove_list_item .)
    LIST            reduce using rule 42 (primary_exp -> remove_list_item .)
    NUMBER          reduce using rule 42 (primary_exp -> remove_list_item .)
    STRING          reduce using rule 42 (primary_exp -> remove_list_item .)
    TRUE            reduce using rule 42 (primary_exp -> remove_list_item .)
    FALSE           reduce using rule 42 (primary_exp -> remove_list_item .)
    SIZE            reduce using rule 42 (primary_exp -> remove_list_item .)
    REMOVE          reduce using rule 42 (primary_exp -> remove_list_item .)
    HAS             reduce using rule 42 (primary_exp -> remove_list_item .)
    LBRACKET        reduce using rule 42 (primary_exp -> remove_list_item .)
    END             reduce using rule 42 (primary_exp -> remove_list_item .)
    RBRACE          reduce using rule 42 (primary_exp -> remove_list_item .)
    RETURN          reduce using rule 42 (primary_exp -> remove_list_item .)
    RPAREN          reduce using rule 42 (primary_exp -> remove_list_item .)
    RBRACKET        reduce using rule 42 (primary_exp -> remove_list_item .)
    COMMA           reduce using rule 42 (primary_exp -> remove_list_item .)


state 36

    (43) primary_exp -> read_list_item .

    PLUS            reduce using rule 43 (primary_exp -> read_list_item .)
    MINUS           reduce using rule 43 (primary_exp -> read_list_item .)
    MULTIPLY        reduce using rule 43 (primary_exp -> read_list_item .)
    DIVIDE          reduce using rule 43 (primary_exp -> read_list_item .)
    AND             reduce using rule 43 (primary_exp -> read_list_item .)
    OR              reduce using rule 43 (primary_exp -> read_list_item .)
    LT              reduce using rule 43 (primary_exp -> read_list_item .)
    GT              reduce using rule 43 (primary_exp -> read_list_item .)
    LE              reduce using rule 43 (primary_exp -> read_list_item .)
    GE              reduce using rule 43 (primary_exp -> read_list_item .)
    EQ              reduce using rule 43 (primary_exp -> read_list_item .)
    NE              reduce using rule 43 (primary_exp -> read_list_item .)
    FUNC            reduce using rule 43 (primary_exp -> read_list_item .)
    LOOP            reduce using rule 43 (primary_exp -> read_list_item .)
    IF              reduce using rule 43 (primary_exp -> read_list_item .)
    ID              reduce using rule 43 (primary_exp -> read_list_item .)
    ADD             reduce using rule 43 (primary_exp -> read_list_item .)
    CONSOLE         reduce using rule 43 (primary_exp -> read_list_item .)
    NOT             reduce using rule 43 (primary_exp -> read_list_item .)
    LPAREN          reduce using rule 43 (primary_exp -> read_list_item .)
    STR             reduce using rule 43 (primary_exp -> read_list_item .)
    NUM             reduce using rule 43 (primary_exp -> read_list_item .)
    BOOL            reduce using rule 43 (primary_exp -> read_list_item .)
    LIST            reduce using rule 43 (primary_exp -> read_list_item .)
    NUMBER          reduce using rule 43 (primary_exp -> read_list_item .)
    STRING          reduce using rule 43 (primary_exp -> read_list_item .)
    TRUE            reduce using rule 43 (primary_exp -> read_list_item .)
    FALSE           reduce using rule 43 (primary_exp -> read_list_item .)
    SIZE            reduce using rule 43 (primary_exp -> read_list_item .)
    REMOVE          reduce using rule 43 (primary_exp -> read_list_item .)
    HAS             reduce using rule 43 (primary_exp -> read_list_item .)
    LBRACKET        reduce using rule 43 (primary_exp -> read_list_item .)
    END             reduce using rule 43 (primary_exp -> read_list_item .)
    RBRACE          reduce using rule 43 (primary_exp -> read_list_item .)
    RETURN          reduce using rule 43 (primary_exp -> read_list_item .)
    RPAREN          reduce using rule 43 (primary_exp -> read_list_item .)
    RBRACKET        reduce using rule 43 (primary_exp -> read_list_item .)
    COMMA           reduce using rule 43 (primary_exp -> read_list_item .)


state 37

    (44) primary_exp -> has_list_item .

    PLUS            reduce using rule 44 (primary_exp -> has_list_item .)
    MINUS           reduce using rule 44 (primary_exp -> has_list_item .)
    MULTIPLY        reduce using rule 44 (primary_exp -> has_list_item .)
    DIVIDE          reduce using rule 44 (primary_exp -> has_list_item .)
    AND             reduce using rule 44 (primary_exp -> has_list_item .)
    OR              reduce using rule 44 (primary_exp -> has_list_item .)
    LT              reduce using rule 44 (primary_exp -> has_list_item .)
    GT              reduce using rule 44 (primary_exp -> has_list_item .)
    LE              reduce using rule 44 (primary_exp -> has_list_item .)
    GE              reduce using rule 44 (primary_exp -> has_list_item .)
    EQ              reduce using rule 44 (primary_exp -> has_list_item .)
    NE              reduce using rule 44 (primary_exp -> has_list_item .)
    FUNC            reduce using rule 44 (primary_exp -> has_list_item .)
    LOOP            reduce using rule 44 (primary_exp -> has_list_item .)
    IF              reduce using rule 44 (primary_exp -> has_list_item .)
    ID              reduce using rule 44 (primary_exp -> has_list_item .)
    ADD             reduce using rule 44 (primary_exp -> has_list_item .)
    CONSOLE         reduce using rule 44 (primary_exp -> has_list_item .)
    NOT             reduce using rule 44 (primary_exp -> has_list_item .)
    LPAREN          reduce using rule 44 (primary_exp -> has_list_item .)
    STR             reduce using rule 44 (primary_exp -> has_list_item .)
    NUM             reduce using rule 44 (primary_exp -> has_list_item .)
    BOOL            reduce using rule 44 (primary_exp -> has_list_item .)
    LIST            reduce using rule 44 (primary_exp -> has_list_item .)
    NUMBER          reduce using rule 44 (primary_exp -> has_list_item .)
    STRING          reduce using rule 44 (primary_exp -> has_list_item .)
    TRUE            reduce using rule 44 (primary_exp -> has_list_item .)
    FALSE           reduce using rule 44 (primary_exp -> has_list_item .)
    SIZE            reduce using rule 44 (primary_exp -> has_list_item .)
    REMOVE          reduce using rule 44 (primary_exp -> has_list_item .)
    HAS             reduce using rule 44 (primary_exp -> has_list_item .)
    LBRACKET        reduce using rule 44 (primary_exp -> has_list_item .)
    END             reduce using rule 44 (primary_exp -> has_list_item .)
    RBRACE          reduce using rule 44 (primary_exp -> has_list_item .)
    RETURN          reduce using rule 44 (primary_exp -> has_list_item .)
    RPAREN          reduce using rule 44 (primary_exp -> has_list_item .)
    RBRACKET        reduce using rule 44 (primary_exp -> has_list_item .)
    COMMA           reduce using rule 44 (primary_exp -> has_list_item .)


state 38

    (45) primary_exp -> list .

    PLUS            reduce using rule 45 (primary_exp -> list .)
    MINUS           reduce using rule 45 (primary_exp -> list .)
    MULTIPLY        reduce using rule 45 (primary_exp -> list .)
    DIVIDE          reduce using rule 45 (primary_exp -> list .)
    AND             reduce using rule 45 (primary_exp -> list .)
    OR              reduce using rule 45 (primary_exp -> list .)
    LT              reduce using rule 45 (primary_exp -> list .)
    GT              reduce using rule 45 (primary_exp -> list .)
    LE              reduce using rule 45 (primary_exp -> list .)
    GE              reduce using rule 45 (primary_exp -> list .)
    EQ              reduce using rule 45 (primary_exp -> list .)
    NE              reduce using rule 45 (primary_exp -> list .)
    FUNC            reduce using rule 45 (primary_exp -> list .)
    LOOP            reduce using rule 45 (primary_exp -> list .)
    IF              reduce using rule 45 (primary_exp -> list .)
    ID              reduce using rule 45 (primary_exp -> list .)
    ADD             reduce using rule 45 (primary_exp -> list .)
    CONSOLE         reduce using rule 45 (primary_exp -> list .)
    NOT             reduce using rule 45 (primary_exp -> list .)
    LPAREN          reduce using rule 45 (primary_exp -> list .)
    STR             reduce using rule 45 (primary_exp -> list .)
    NUM             reduce using rule 45 (primary_exp -> list .)
    BOOL            reduce using rule 45 (primary_exp -> list .)
    LIST            reduce using rule 45 (primary_exp -> list .)
    NUMBER          reduce using rule 45 (primary_exp -> list .)
    STRING          reduce using rule 45 (primary_exp -> list .)
    TRUE            reduce using rule 45 (primary_exp -> list .)
    FALSE           reduce using rule 45 (primary_exp -> list .)
    SIZE            reduce using rule 45 (primary_exp -> list .)
    REMOVE          reduce using rule 45 (primary_exp -> list .)
    HAS             reduce using rule 45 (primary_exp -> list .)
    LBRACKET        reduce using rule 45 (primary_exp -> list .)
    END             reduce using rule 45 (primary_exp -> list .)
    RBRACE          reduce using rule 45 (primary_exp -> list .)
    RETURN          reduce using rule 45 (primary_exp -> list .)
    RPAREN          reduce using rule 45 (primary_exp -> list .)
    RBRACKET        reduce using rule 45 (primary_exp -> list .)
    COMMA           reduce using rule 45 (primary_exp -> list .)


state 39

    (65) type -> STR .

    ID              reduce using rule 65 (type -> STR .)
    GT              reduce using rule 65 (type -> STR .)
    LBRACE          reduce using rule 65 (type -> STR .)


state 40

    (66) type -> NUM .

    ID              reduce using rule 66 (type -> NUM .)
    GT              reduce using rule 66 (type -> NUM .)
    LBRACE          reduce using rule 66 (type -> NUM .)


state 41

    (67) type -> BOOL .

    ID              reduce using rule 67 (type -> BOOL .)
    GT              reduce using rule 67 (type -> BOOL .)
    LBRACE          reduce using rule 67 (type -> BOOL .)


state 42

    (68) type -> LIST . LT type GT

    LT              shift and go to state 79


state 43

    (79) primitive -> NUMBER .

    PLUS            reduce using rule 79 (primitive -> NUMBER .)
    MINUS           reduce using rule 79 (primitive -> NUMBER .)
    MULTIPLY        reduce using rule 79 (primitive -> NUMBER .)
    DIVIDE          reduce using rule 79 (primitive -> NUMBER .)
    AND             reduce using rule 79 (primitive -> NUMBER .)
    OR              reduce using rule 79 (primitive -> NUMBER .)
    LT              reduce using rule 79 (primitive -> NUMBER .)
    GT              reduce using rule 79 (primitive -> NUMBER .)
    LE              reduce using rule 79 (primitive -> NUMBER .)
    GE              reduce using rule 79 (primitive -> NUMBER .)
    EQ              reduce using rule 79 (primitive -> NUMBER .)
    NE              reduce using rule 79 (primitive -> NUMBER .)
    FUNC            reduce using rule 79 (primitive -> NUMBER .)
    LOOP            reduce using rule 79 (primitive -> NUMBER .)
    IF              reduce using rule 79 (primitive -> NUMBER .)
    ID              reduce using rule 79 (primitive -> NUMBER .)
    ADD             reduce using rule 79 (primitive -> NUMBER .)
    CONSOLE         reduce using rule 79 (primitive -> NUMBER .)
    NOT             reduce using rule 79 (primitive -> NUMBER .)
    LPAREN          reduce using rule 79 (primitive -> NUMBER .)
    STR             reduce using rule 79 (primitive -> NUMBER .)
    NUM             reduce using rule 79 (primitive -> NUMBER .)
    BOOL            reduce using rule 79 (primitive -> NUMBER .)
    LIST            reduce using rule 79 (primitive -> NUMBER .)
    NUMBER          reduce using rule 79 (primitive -> NUMBER .)
    STRING          reduce using rule 79 (primitive -> NUMBER .)
    TRUE            reduce using rule 79 (primitive -> NUMBER .)
    FALSE           reduce using rule 79 (primitive -> NUMBER .)
    SIZE            reduce using rule 79 (primitive -> NUMBER .)
    REMOVE          reduce using rule 79 (primitive -> NUMBER .)
    HAS             reduce using rule 79 (primitive -> NUMBER .)
    LBRACKET        reduce using rule 79 (primitive -> NUMBER .)
    END             reduce using rule 79 (primitive -> NUMBER .)
    RBRACE          reduce using rule 79 (primitive -> NUMBER .)
    RETURN          reduce using rule 79 (primitive -> NUMBER .)
    RPAREN          reduce using rule 79 (primitive -> NUMBER .)
    RBRACKET        reduce using rule 79 (primitive -> NUMBER .)
    COMMA           reduce using rule 79 (primitive -> NUMBER .)


state 44

    (80) primitive -> STRING .

    PLUS            reduce using rule 80 (primitive -> STRING .)
    MINUS           reduce using rule 80 (primitive -> STRING .)
    MULTIPLY        reduce using rule 80 (primitive -> STRING .)
    DIVIDE          reduce using rule 80 (primitive -> STRING .)
    AND             reduce using rule 80 (primitive -> STRING .)
    OR              reduce using rule 80 (primitive -> STRING .)
    LT              reduce using rule 80 (primitive -> STRING .)
    GT              reduce using rule 80 (primitive -> STRING .)
    LE              reduce using rule 80 (primitive -> STRING .)
    GE              reduce using rule 80 (primitive -> STRING .)
    EQ              reduce using rule 80 (primitive -> STRING .)
    NE              reduce using rule 80 (primitive -> STRING .)
    FUNC            reduce using rule 80 (primitive -> STRING .)
    LOOP            reduce using rule 80 (primitive -> STRING .)
    IF              reduce using rule 80 (primitive -> STRING .)
    ID              reduce using rule 80 (primitive -> STRING .)
    ADD             reduce using rule 80 (primitive -> STRING .)
    CONSOLE         reduce using rule 80 (primitive -> STRING .)
    NOT             reduce using rule 80 (primitive -> STRING .)
    LPAREN          reduce using rule 80 (primitive -> STRING .)
    STR             reduce using rule 80 (primitive -> STRING .)
    NUM             reduce using rule 80 (primitive -> STRING .)
    BOOL            reduce using rule 80 (primitive -> STRING .)
    LIST            reduce using rule 80 (primitive -> STRING .)
    NUMBER          reduce using rule 80 (primitive -> STRING .)
    STRING          reduce using rule 80 (primitive -> STRING .)
    TRUE            reduce using rule 80 (primitive -> STRING .)
    FALSE           reduce using rule 80 (primitive -> STRING .)
    SIZE            reduce using rule 80 (primitive -> STRING .)
    REMOVE          reduce using rule 80 (primitive -> STRING .)
    HAS             reduce using rule 80 (primitive -> STRING .)
    LBRACKET        reduce using rule 80 (primitive -> STRING .)
    END             reduce using rule 80 (primitive -> STRING .)
    RBRACE          reduce using rule 80 (primitive -> STRING .)
    RETURN          reduce using rule 80 (primitive -> STRING .)
    RPAREN          reduce using rule 80 (primitive -> STRING .)
    RBRACKET        reduce using rule 80 (primitive -> STRING .)
    COMMA           reduce using rule 80 (primitive -> STRING .)


state 45

    (81) primitive -> TRUE .

    PLUS            reduce using rule 81 (primitive -> TRUE .)
    MINUS           reduce using rule 81 (primitive -> TRUE .)
    MULTIPLY        reduce using rule 81 (primitive -> TRUE .)
    DIVIDE          reduce using rule 81 (primitive -> TRUE .)
    AND             reduce using rule 81 (primitive -> TRUE .)
    OR              reduce using rule 81 (primitive -> TRUE .)
    LT              reduce using rule 81 (primitive -> TRUE .)
    GT              reduce using rule 81 (primitive -> TRUE .)
    LE              reduce using rule 81 (primitive -> TRUE .)
    GE              reduce using rule 81 (primitive -> TRUE .)
    EQ              reduce using rule 81 (primitive -> TRUE .)
    NE              reduce using rule 81 (primitive -> TRUE .)
    FUNC            reduce using rule 81 (primitive -> TRUE .)
    LOOP            reduce using rule 81 (primitive -> TRUE .)
    IF              reduce using rule 81 (primitive -> TRUE .)
    ID              reduce using rule 81 (primitive -> TRUE .)
    ADD             reduce using rule 81 (primitive -> TRUE .)
    CONSOLE         reduce using rule 81 (primitive -> TRUE .)
    NOT             reduce using rule 81 (primitive -> TRUE .)
    LPAREN          reduce using rule 81 (primitive -> TRUE .)
    STR             reduce using rule 81 (primitive -> TRUE .)
    NUM             reduce using rule 81 (primitive -> TRUE .)
    BOOL            reduce using rule 81 (primitive -> TRUE .)
    LIST            reduce using rule 81 (primitive -> TRUE .)
    NUMBER          reduce using rule 81 (primitive -> TRUE .)
    STRING          reduce using rule 81 (primitive -> TRUE .)
    TRUE            reduce using rule 81 (primitive -> TRUE .)
    FALSE           reduce using rule 81 (primitive -> TRUE .)
    SIZE            reduce using rule 81 (primitive -> TRUE .)
    REMOVE          reduce using rule 81 (primitive -> TRUE .)
    HAS             reduce using rule 81 (primitive -> TRUE .)
    LBRACKET        reduce using rule 81 (primitive -> TRUE .)
    END             reduce using rule 81 (primitive -> TRUE .)
    RBRACE          reduce using rule 81 (primitive -> TRUE .)
    RETURN          reduce using rule 81 (primitive -> TRUE .)
    RPAREN          reduce using rule 81 (primitive -> TRUE .)
    RBRACKET        reduce using rule 81 (primitive -> TRUE .)
    COMMA           reduce using rule 81 (primitive -> TRUE .)


state 46

    (82) primitive -> FALSE .

    PLUS            reduce using rule 82 (primitive -> FALSE .)
    MINUS           reduce using rule 82 (primitive -> FALSE .)
    MULTIPLY        reduce using rule 82 (primitive -> FALSE .)
    DIVIDE          reduce using rule 82 (primitive -> FALSE .)
    AND             reduce using rule 82 (primitive -> FALSE .)
    OR              reduce using rule 82 (primitive -> FALSE .)
    LT              reduce using rule 82 (primitive -> FALSE .)
    GT              reduce using rule 82 (primitive -> FALSE .)
    LE              reduce using rule 82 (primitive -> FALSE .)
    GE              reduce using rule 82 (primitive -> FALSE .)
    EQ              reduce using rule 82 (primitive -> FALSE .)
    NE              reduce using rule 82 (primitive -> FALSE .)
    FUNC            reduce using rule 82 (primitive -> FALSE .)
    LOOP            reduce using rule 82 (primitive -> FALSE .)
    IF              reduce using rule 82 (primitive -> FALSE .)
    ID              reduce using rule 82 (primitive -> FALSE .)
    ADD             reduce using rule 82 (primitive -> FALSE .)
    CONSOLE         reduce using rule 82 (primitive -> FALSE .)
    NOT             reduce using rule 82 (primitive -> FALSE .)
    LPAREN          reduce using rule 82 (primitive -> FALSE .)
    STR             reduce using rule 82 (primitive -> FALSE .)
    NUM             reduce using rule 82 (primitive -> FALSE .)
    BOOL            reduce using rule 82 (primitive -> FALSE .)
    LIST            reduce using rule 82 (primitive -> FALSE .)
    NUMBER          reduce using rule 82 (primitive -> FALSE .)
    STRING          reduce using rule 82 (primitive -> FALSE .)
    TRUE            reduce using rule 82 (primitive -> FALSE .)
    FALSE           reduce using rule 82 (primitive -> FALSE .)
    SIZE            reduce using rule 82 (primitive -> FALSE .)
    REMOVE          reduce using rule 82 (primitive -> FALSE .)
    HAS             reduce using rule 82 (primitive -> FALSE .)
    LBRACKET        reduce using rule 82 (primitive -> FALSE .)
    END             reduce using rule 82 (primitive -> FALSE .)
    RBRACE          reduce using rule 82 (primitive -> FALSE .)
    RETURN          reduce using rule 82 (primitive -> FALSE .)
    RPAREN          reduce using rule 82 (primitive -> FALSE .)
    RBRACKET        reduce using rule 82 (primitive -> FALSE .)
    COMMA           reduce using rule 82 (primitive -> FALSE .)


state 47

    (74) len_list_item -> SIZE . LPAREN exp RPAREN

    LPAREN          shift and go to state 80


state 48

    (76) remove_list_item -> REMOVE . LPAREN exp RPAREN

    LPAREN          shift and go to state 81


state 49

    (77) has_list_item -> HAS . LPAREN exp COMMA primitive RPAREN

    LPAREN          shift and go to state 82


state 50

    (35) exp -> exp operator . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 83
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 51

    (52) operator -> PLUS .

    NOT             reduce using rule 52 (operator -> PLUS .)
    LPAREN          reduce using rule 52 (operator -> PLUS .)
    ID              reduce using rule 52 (operator -> PLUS .)
    NUMBER          reduce using rule 52 (operator -> PLUS .)
    STRING          reduce using rule 52 (operator -> PLUS .)
    TRUE            reduce using rule 52 (operator -> PLUS .)
    FALSE           reduce using rule 52 (operator -> PLUS .)
    SIZE            reduce using rule 52 (operator -> PLUS .)
    REMOVE          reduce using rule 52 (operator -> PLUS .)
    HAS             reduce using rule 52 (operator -> PLUS .)
    LBRACKET        reduce using rule 52 (operator -> PLUS .)


state 52

    (53) operator -> MINUS .

    NOT             reduce using rule 53 (operator -> MINUS .)
    LPAREN          reduce using rule 53 (operator -> MINUS .)
    ID              reduce using rule 53 (operator -> MINUS .)
    NUMBER          reduce using rule 53 (operator -> MINUS .)
    STRING          reduce using rule 53 (operator -> MINUS .)
    TRUE            reduce using rule 53 (operator -> MINUS .)
    FALSE           reduce using rule 53 (operator -> MINUS .)
    SIZE            reduce using rule 53 (operator -> MINUS .)
    REMOVE          reduce using rule 53 (operator -> MINUS .)
    HAS             reduce using rule 53 (operator -> MINUS .)
    LBRACKET        reduce using rule 53 (operator -> MINUS .)


state 53

    (54) operator -> MULTIPLY .

    NOT             reduce using rule 54 (operator -> MULTIPLY .)
    LPAREN          reduce using rule 54 (operator -> MULTIPLY .)
    ID              reduce using rule 54 (operator -> MULTIPLY .)
    NUMBER          reduce using rule 54 (operator -> MULTIPLY .)
    STRING          reduce using rule 54 (operator -> MULTIPLY .)
    TRUE            reduce using rule 54 (operator -> MULTIPLY .)
    FALSE           reduce using rule 54 (operator -> MULTIPLY .)
    SIZE            reduce using rule 54 (operator -> MULTIPLY .)
    REMOVE          reduce using rule 54 (operator -> MULTIPLY .)
    HAS             reduce using rule 54 (operator -> MULTIPLY .)
    LBRACKET        reduce using rule 54 (operator -> MULTIPLY .)


state 54

    (55) operator -> DIVIDE .

    NOT             reduce using rule 55 (operator -> DIVIDE .)
    LPAREN          reduce using rule 55 (operator -> DIVIDE .)
    ID              reduce using rule 55 (operator -> DIVIDE .)
    NUMBER          reduce using rule 55 (operator -> DIVIDE .)
    STRING          reduce using rule 55 (operator -> DIVIDE .)
    TRUE            reduce using rule 55 (operator -> DIVIDE .)
    FALSE           reduce using rule 55 (operator -> DIVIDE .)
    SIZE            reduce using rule 55 (operator -> DIVIDE .)
    REMOVE          reduce using rule 55 (operator -> DIVIDE .)
    HAS             reduce using rule 55 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 55 (operator -> DIVIDE .)


state 55

    (56) operator -> AND .

    NOT             reduce using rule 56 (operator -> AND .)
    LPAREN          reduce using rule 56 (operator -> AND .)
    ID              reduce using rule 56 (operator -> AND .)
    NUMBER          reduce using rule 56 (operator -> AND .)
    STRING          reduce using rule 56 (operator -> AND .)
    TRUE            reduce using rule 56 (operator -> AND .)
    FALSE           reduce using rule 56 (operator -> AND .)
    SIZE            reduce using rule 56 (operator -> AND .)
    REMOVE          reduce using rule 56 (operator -> AND .)
    HAS             reduce using rule 56 (operator -> AND .)
    LBRACKET        reduce using rule 56 (operator -> AND .)


state 56

    (57) operator -> OR .

    NOT             reduce using rule 57 (operator -> OR .)
    LPAREN          reduce using rule 57 (operator -> OR .)
    ID              reduce using rule 57 (operator -> OR .)
    NUMBER          reduce using rule 57 (operator -> OR .)
    STRING          reduce using rule 57 (operator -> OR .)
    TRUE            reduce using rule 57 (operator -> OR .)
    FALSE           reduce using rule 57 (operator -> OR .)
    SIZE            reduce using rule 57 (operator -> OR .)
    REMOVE          reduce using rule 57 (operator -> OR .)
    HAS             reduce using rule 57 (operator -> OR .)
    LBRACKET        reduce using rule 57 (operator -> OR .)


state 57

    (58) operator -> LT .

    NOT             reduce using rule 58 (operator -> LT .)
    LPAREN          reduce using rule 58 (operator -> LT .)
    ID              reduce using rule 58 (operator -> LT .)
    NUMBER          reduce using rule 58 (operator -> LT .)
    STRING          reduce using rule 58 (operator -> LT .)
    TRUE            reduce using rule 58 (operator -> LT .)
    FALSE           reduce using rule 58 (operator -> LT .)
    SIZE            reduce using rule 58 (operator -> LT .)
    REMOVE          reduce using rule 58 (operator -> LT .)
    HAS             reduce using rule 58 (operator -> LT .)
    LBRACKET        reduce using rule 58 (operator -> LT .)


state 58

    (59) operator -> GT .

    NOT             reduce using rule 59 (operator -> GT .)
    LPAREN          reduce using rule 59 (operator -> GT .)
    ID              reduce using rule 59 (operator -> GT .)
    NUMBER          reduce using rule 59 (operator -> GT .)
    STRING          reduce using rule 59 (operator -> GT .)
    TRUE            reduce using rule 59 (operator -> GT .)
    FALSE           reduce using rule 59 (operator -> GT .)
    SIZE            reduce using rule 59 (operator -> GT .)
    REMOVE          reduce using rule 59 (operator -> GT .)
    HAS             reduce using rule 59 (operator -> GT .)
    LBRACKET        reduce using rule 59 (operator -> GT .)


state 59

    (60) operator -> LE .

    NOT             reduce using rule 60 (operator -> LE .)
    LPAREN          reduce using rule 60 (operator -> LE .)
    ID              reduce using rule 60 (operator -> LE .)
    NUMBER          reduce using rule 60 (operator -> LE .)
    STRING          reduce using rule 60 (operator -> LE .)
    TRUE            reduce using rule 60 (operator -> LE .)
    FALSE           reduce using rule 60 (operator -> LE .)
    SIZE            reduce using rule 60 (operator -> LE .)
    REMOVE          reduce using rule 60 (operator -> LE .)
    HAS             reduce using rule 60 (operator -> LE .)
    LBRACKET        reduce using rule 60 (operator -> LE .)


state 60

    (61) operator -> GE .

    NOT             reduce using rule 61 (operator -> GE .)
    LPAREN          reduce using rule 61 (operator -> GE .)
    ID              reduce using rule 61 (operator -> GE .)
    NUMBER          reduce using rule 61 (operator -> GE .)
    STRING          reduce using rule 61 (operator -> GE .)
    TRUE            reduce using rule 61 (operator -> GE .)
    FALSE           reduce using rule 61 (operator -> GE .)
    SIZE            reduce using rule 61 (operator -> GE .)
    REMOVE          reduce using rule 61 (operator -> GE .)
    HAS             reduce using rule 61 (operator -> GE .)
    LBRACKET        reduce using rule 61 (operator -> GE .)


state 61

    (62) operator -> EQ .

    NOT             reduce using rule 62 (operator -> EQ .)
    LPAREN          reduce using rule 62 (operator -> EQ .)
    ID              reduce using rule 62 (operator -> EQ .)
    NUMBER          reduce using rule 62 (operator -> EQ .)
    STRING          reduce using rule 62 (operator -> EQ .)
    TRUE            reduce using rule 62 (operator -> EQ .)
    FALSE           reduce using rule 62 (operator -> EQ .)
    SIZE            reduce using rule 62 (operator -> EQ .)
    REMOVE          reduce using rule 62 (operator -> EQ .)
    HAS             reduce using rule 62 (operator -> EQ .)
    LBRACKET        reduce using rule 62 (operator -> EQ .)


state 62

    (63) operator -> NE .

    NOT             reduce using rule 63 (operator -> NE .)
    LPAREN          reduce using rule 63 (operator -> NE .)
    ID              reduce using rule 63 (operator -> NE .)
    NUMBER          reduce using rule 63 (operator -> NE .)
    STRING          reduce using rule 63 (operator -> NE .)
    TRUE            reduce using rule 63 (operator -> NE .)
    FALSE           reduce using rule 63 (operator -> NE .)
    SIZE            reduce using rule 63 (operator -> NE .)
    REMOVE          reduce using rule 63 (operator -> NE .)
    HAS             reduce using rule 63 (operator -> NE .)
    LBRACKET        reduce using rule 63 (operator -> NE .)


state 63

    (36) exp -> op_bool_un exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    FUNC            reduce using rule 36 (exp -> op_bool_un exp .)
    LOOP            reduce using rule 36 (exp -> op_bool_un exp .)
    IF              reduce using rule 36 (exp -> op_bool_un exp .)
    ID              reduce using rule 36 (exp -> op_bool_un exp .)
    ADD             reduce using rule 36 (exp -> op_bool_un exp .)
    CONSOLE         reduce using rule 36 (exp -> op_bool_un exp .)
    NOT             reduce using rule 36 (exp -> op_bool_un exp .)
    LPAREN          reduce using rule 36 (exp -> op_bool_un exp .)
    STR             reduce using rule 36 (exp -> op_bool_un exp .)
    NUM             reduce using rule 36 (exp -> op_bool_un exp .)
    BOOL            reduce using rule 36 (exp -> op_bool_un exp .)
    LIST            reduce using rule 36 (exp -> op_bool_un exp .)
    NUMBER          reduce using rule 36 (exp -> op_bool_un exp .)
    STRING          reduce using rule 36 (exp -> op_bool_un exp .)
    TRUE            reduce using rule 36 (exp -> op_bool_un exp .)
    FALSE           reduce using rule 36 (exp -> op_bool_un exp .)
    SIZE            reduce using rule 36 (exp -> op_bool_un exp .)
    REMOVE          reduce using rule 36 (exp -> op_bool_un exp .)
    HAS             reduce using rule 36 (exp -> op_bool_un exp .)
    LBRACKET        reduce using rule 36 (exp -> op_bool_un exp .)
    END             reduce using rule 36 (exp -> op_bool_un exp .)
    RBRACE          reduce using rule 36 (exp -> op_bool_un exp .)
    RETURN          reduce using rule 36 (exp -> op_bool_un exp .)
    RPAREN          reduce using rule 36 (exp -> op_bool_un exp .)
    RBRACKET        reduce using rule 36 (exp -> op_bool_un exp .)
    COMMA           reduce using rule 36 (exp -> op_bool_un exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! PLUS            [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! MULTIPLY        [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! DIVIDE          [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! AND             [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! OR              [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! LT              [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! GT              [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! LE              [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! GE              [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! EQ              [ reduce using rule 36 (exp -> op_bool_un exp .) ]
  ! NE              [ reduce using rule 36 (exp -> op_bool_un exp .) ]

    operator                       shift and go to state 50

state 64

    (40) primary_exp -> id .
    (75) read_list_item -> id . LBRACKET exp RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    PLUS            reduce using rule 40 (primary_exp -> id .)
    MINUS           reduce using rule 40 (primary_exp -> id .)
    MULTIPLY        reduce using rule 40 (primary_exp -> id .)
    DIVIDE          reduce using rule 40 (primary_exp -> id .)
    AND             reduce using rule 40 (primary_exp -> id .)
    OR              reduce using rule 40 (primary_exp -> id .)
    LT              reduce using rule 40 (primary_exp -> id .)
    GT              reduce using rule 40 (primary_exp -> id .)
    LE              reduce using rule 40 (primary_exp -> id .)
    GE              reduce using rule 40 (primary_exp -> id .)
    EQ              reduce using rule 40 (primary_exp -> id .)
    NE              reduce using rule 40 (primary_exp -> id .)
    FUNC            reduce using rule 40 (primary_exp -> id .)
    LOOP            reduce using rule 40 (primary_exp -> id .)
    IF              reduce using rule 40 (primary_exp -> id .)
    ID              reduce using rule 40 (primary_exp -> id .)
    ADD             reduce using rule 40 (primary_exp -> id .)
    CONSOLE         reduce using rule 40 (primary_exp -> id .)
    NOT             reduce using rule 40 (primary_exp -> id .)
    LPAREN          reduce using rule 40 (primary_exp -> id .)
    STR             reduce using rule 40 (primary_exp -> id .)
    NUM             reduce using rule 40 (primary_exp -> id .)
    BOOL            reduce using rule 40 (primary_exp -> id .)
    LIST            reduce using rule 40 (primary_exp -> id .)
    NUMBER          reduce using rule 40 (primary_exp -> id .)
    STRING          reduce using rule 40 (primary_exp -> id .)
    TRUE            reduce using rule 40 (primary_exp -> id .)
    FALSE           reduce using rule 40 (primary_exp -> id .)
    SIZE            reduce using rule 40 (primary_exp -> id .)
    REMOVE          reduce using rule 40 (primary_exp -> id .)
    HAS             reduce using rule 40 (primary_exp -> id .)
    END             reduce using rule 40 (primary_exp -> id .)
    RBRACE          reduce using rule 40 (primary_exp -> id .)
    RETURN          reduce using rule 40 (primary_exp -> id .)
    RPAREN          reduce using rule 40 (primary_exp -> id .)
    RBRACKET        reduce using rule 40 (primary_exp -> id .)
    COMMA           reduce using rule 40 (primary_exp -> id .)
    LBRACKET        shift and go to state 84

  ! LBRACKET        [ reduce using rule 40 (primary_exp -> id .) ]


state 65

    (26) call_func -> ID . LPAREN args RPAREN
    (27) call_func -> ID . LPAREN RPAREN
    (51) id -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 68
    LBRACKET        reduce using rule 51 (id -> ID .)
    PLUS            reduce using rule 51 (id -> ID .)
    MINUS           reduce using rule 51 (id -> ID .)
    MULTIPLY        reduce using rule 51 (id -> ID .)
    DIVIDE          reduce using rule 51 (id -> ID .)
    AND             reduce using rule 51 (id -> ID .)
    OR              reduce using rule 51 (id -> ID .)
    LT              reduce using rule 51 (id -> ID .)
    GT              reduce using rule 51 (id -> ID .)
    LE              reduce using rule 51 (id -> ID .)
    GE              reduce using rule 51 (id -> ID .)
    EQ              reduce using rule 51 (id -> ID .)
    NE              reduce using rule 51 (id -> ID .)
    FUNC            reduce using rule 51 (id -> ID .)
    LOOP            reduce using rule 51 (id -> ID .)
    IF              reduce using rule 51 (id -> ID .)
    ID              reduce using rule 51 (id -> ID .)
    ADD             reduce using rule 51 (id -> ID .)
    CONSOLE         reduce using rule 51 (id -> ID .)
    NOT             reduce using rule 51 (id -> ID .)
    STR             reduce using rule 51 (id -> ID .)
    NUM             reduce using rule 51 (id -> ID .)
    BOOL            reduce using rule 51 (id -> ID .)
    LIST            reduce using rule 51 (id -> ID .)
    NUMBER          reduce using rule 51 (id -> ID .)
    STRING          reduce using rule 51 (id -> ID .)
    TRUE            reduce using rule 51 (id -> ID .)
    FALSE           reduce using rule 51 (id -> ID .)
    SIZE            reduce using rule 51 (id -> ID .)
    REMOVE          reduce using rule 51 (id -> ID .)
    HAS             reduce using rule 51 (id -> ID .)
    END             reduce using rule 51 (id -> ID .)
    RBRACE          reduce using rule 51 (id -> ID .)
    RETURN          reduce using rule 51 (id -> ID .)
    RPAREN          reduce using rule 51 (id -> ID .)
    RBRACKET        reduce using rule 51 (id -> ID .)
    COMMA           reduce using rule 51 (id -> ID .)

  ! LPAREN          [ reduce using rule 51 (id -> ID .) ]


state 66

    (17) function -> FUNC ID . LPAREN opt_param_list RPAREN LBRACE content RBRACE
    (18) function_return -> FUNC ID . LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE

    LPAREN          shift and go to state 85


state 67

    (48) assign -> ID COLON . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 86
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 68

    (26) call_func -> ID LPAREN . args RPAREN
    (27) call_func -> ID LPAREN . RPAREN
    (49) args -> . args COMMA exp
    (50) args -> . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    RPAREN          shift and go to state 88
    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    args                           shift and go to state 87
    exp                            shift and go to state 89
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 69

    (46) primary_exp -> LPAREN exp . RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 90
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 70

    (47) var -> type ID . COLON exp

    COLON           shift and go to state 91


state 71

    (31) loop -> LOOP LPAREN . ID IN range RPAREN LBRACE content RBRACE

    ID              shift and go to state 92


state 72

    (28) conditional -> IF LPAREN . exp RPAREN LBRACE content RBRACE
    (29) conditional -> IF LPAREN . exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> IF LPAREN . exp RPAREN LBRACE content RBRACE ELSE conditional
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 93
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 73

    (78) list_assign -> id LBRACKET . exp RBRACKET COLON exp
    (75) read_list_item -> id LBRACKET . exp RBRACKET
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    id                             shift and go to state 64
    exp                            shift and go to state 94
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 74

    (69) list -> LBRACKET list_content . RBRACKET
    (71) list_content -> list_content . COMMA exp

    RBRACKET        shift and go to state 95
    COMMA           shift and go to state 96


state 75

    (70) list -> LBRACKET RBRACKET .

    PLUS            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 70 (list -> LBRACKET RBRACKET .)
    MULTIPLY        reduce using rule 70 (list -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    AND             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    OR              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    LT              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    GT              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    LE              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    GE              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    EQ              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    NE              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    FUNC            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    LOOP            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    IF              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    ID              reduce using rule 70 (list -> LBRACKET RBRACKET .)
    ADD             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    CONSOLE         reduce using rule 70 (list -> LBRACKET RBRACKET .)
    NOT             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    STR             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    NUM             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    BOOL            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    LIST            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    STRING          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    TRUE            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    FALSE           reduce using rule 70 (list -> LBRACKET RBRACKET .)
    SIZE            reduce using rule 70 (list -> LBRACKET RBRACKET .)
    REMOVE          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    HAS             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 70 (list -> LBRACKET RBRACKET .)
    END             reduce using rule 70 (list -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 70 (list -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 70 (list -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 70 (list -> LBRACKET RBRACKET .)


state 76

    (72) list_content -> exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RBRACKET        reduce using rule 72 (list_content -> exp .)
    COMMA           reduce using rule 72 (list_content -> exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 77

    (73) add_list_item -> ADD LPAREN . exp COMMA exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 97
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 78

    (16) console -> CONSOLE LPAREN . args RPAREN
    (49) args -> . args COMMA exp
    (50) args -> . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    args                           shift and go to state 98
    exp                            shift and go to state 89
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 79

    (68) type -> LIST LT . type GT
    (65) type -> . STR
    (66) type -> . NUM
    (67) type -> . BOOL
    (68) type -> . LIST LT type GT

    STR             shift and go to state 39
    NUM             shift and go to state 40
    BOOL            shift and go to state 41
    LIST            shift and go to state 42

    type                           shift and go to state 99

state 80

    (74) len_list_item -> SIZE LPAREN . exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 100
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 81

    (76) remove_list_item -> REMOVE LPAREN . exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 101
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 82

    (77) has_list_item -> HAS LPAREN . exp COMMA primitive RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 102
    primitive                      shift and go to state 33
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 83

    (35) exp -> exp operator exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    FUNC            reduce using rule 35 (exp -> exp operator exp .)
    LOOP            reduce using rule 35 (exp -> exp operator exp .)
    IF              reduce using rule 35 (exp -> exp operator exp .)
    ID              reduce using rule 35 (exp -> exp operator exp .)
    ADD             reduce using rule 35 (exp -> exp operator exp .)
    CONSOLE         reduce using rule 35 (exp -> exp operator exp .)
    NOT             reduce using rule 35 (exp -> exp operator exp .)
    LPAREN          reduce using rule 35 (exp -> exp operator exp .)
    STR             reduce using rule 35 (exp -> exp operator exp .)
    NUM             reduce using rule 35 (exp -> exp operator exp .)
    BOOL            reduce using rule 35 (exp -> exp operator exp .)
    LIST            reduce using rule 35 (exp -> exp operator exp .)
    NUMBER          reduce using rule 35 (exp -> exp operator exp .)
    STRING          reduce using rule 35 (exp -> exp operator exp .)
    TRUE            reduce using rule 35 (exp -> exp operator exp .)
    FALSE           reduce using rule 35 (exp -> exp operator exp .)
    SIZE            reduce using rule 35 (exp -> exp operator exp .)
    REMOVE          reduce using rule 35 (exp -> exp operator exp .)
    HAS             reduce using rule 35 (exp -> exp operator exp .)
    LBRACKET        reduce using rule 35 (exp -> exp operator exp .)
    END             reduce using rule 35 (exp -> exp operator exp .)
    RBRACE          reduce using rule 35 (exp -> exp operator exp .)
    RETURN          reduce using rule 35 (exp -> exp operator exp .)
    RPAREN          reduce using rule 35 (exp -> exp operator exp .)
    RBRACKET        reduce using rule 35 (exp -> exp operator exp .)
    COMMA           reduce using rule 35 (exp -> exp operator exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

  ! PLUS            [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! MULTIPLY        [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! DIVIDE          [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! AND             [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! OR              [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! LT              [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! GT              [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! LE              [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! GE              [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! EQ              [ reduce using rule 35 (exp -> exp operator exp .) ]
  ! NE              [ reduce using rule 35 (exp -> exp operator exp .) ]

    operator                       shift and go to state 50

state 84

    (75) read_list_item -> id LBRACKET . exp RBRACKET
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    id                             shift and go to state 64
    exp                            shift and go to state 103
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 85

    (17) function -> FUNC ID LPAREN . opt_param_list RPAREN LBRACE content RBRACE
    (18) function_return -> FUNC ID LPAREN . opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE
    (19) opt_param_list -> . param_list
    (20) opt_param_list -> . empty
    (21) param_list -> . param_list COMMA param
    (22) param_list -> . param
    (83) empty -> .
    (23) param -> . type ID opt_default
    (65) type -> . STR
    (66) type -> . NUM
    (67) type -> . BOOL
    (68) type -> . LIST LT type GT

    RPAREN          reduce using rule 83 (empty -> .)
    STR             shift and go to state 39
    NUM             shift and go to state 40
    BOOL            shift and go to state 41
    LIST            shift and go to state 42

    opt_param_list                 shift and go to state 104
    type                           shift and go to state 105
    param_list                     shift and go to state 106
    empty                          shift and go to state 107
    param                          shift and go to state 108

state 86

    (48) assign -> ID COLON exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    FUNC            reduce using rule 48 (assign -> ID COLON exp .)
    LOOP            reduce using rule 48 (assign -> ID COLON exp .)
    IF              reduce using rule 48 (assign -> ID COLON exp .)
    ID              reduce using rule 48 (assign -> ID COLON exp .)
    ADD             reduce using rule 48 (assign -> ID COLON exp .)
    CONSOLE         reduce using rule 48 (assign -> ID COLON exp .)
    NOT             reduce using rule 48 (assign -> ID COLON exp .)
    LPAREN          reduce using rule 48 (assign -> ID COLON exp .)
    STR             reduce using rule 48 (assign -> ID COLON exp .)
    NUM             reduce using rule 48 (assign -> ID COLON exp .)
    BOOL            reduce using rule 48 (assign -> ID COLON exp .)
    LIST            reduce using rule 48 (assign -> ID COLON exp .)
    NUMBER          reduce using rule 48 (assign -> ID COLON exp .)
    STRING          reduce using rule 48 (assign -> ID COLON exp .)
    TRUE            reduce using rule 48 (assign -> ID COLON exp .)
    FALSE           reduce using rule 48 (assign -> ID COLON exp .)
    SIZE            reduce using rule 48 (assign -> ID COLON exp .)
    REMOVE          reduce using rule 48 (assign -> ID COLON exp .)
    HAS             reduce using rule 48 (assign -> ID COLON exp .)
    LBRACKET        reduce using rule 48 (assign -> ID COLON exp .)
    END             reduce using rule 48 (assign -> ID COLON exp .)
    RBRACE          reduce using rule 48 (assign -> ID COLON exp .)
    RETURN          reduce using rule 48 (assign -> ID COLON exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 87

    (26) call_func -> ID LPAREN args . RPAREN
    (49) args -> args . COMMA exp

    RPAREN          shift and go to state 109
    COMMA           shift and go to state 110


state 88

    (27) call_func -> ID LPAREN RPAREN .

    PLUS            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    MULTIPLY        reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    AND             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    OR              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    LT              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    GT              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    LE              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    GE              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    EQ              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    NE              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    FUNC            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    LOOP            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    IF              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    ID              reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    ADD             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    CONSOLE         reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    NOT             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    STR             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    NUM             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    BOOL            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    LIST            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    STRING          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    TRUE            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    FALSE           reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    SIZE            reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    REMOVE          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    HAS             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    END             reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 27 (call_func -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 27 (call_func -> ID LPAREN RPAREN .)


state 89

    (50) args -> exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          reduce using rule 50 (args -> exp .)
    COMMA           reduce using rule 50 (args -> exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 90

    (46) primary_exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    LT              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    GT              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    LE              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    GE              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    EQ              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    NE              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    FUNC            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    LOOP            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    IF              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    ID              reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    ADD             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    CONSOLE         reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    NOT             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    STR             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    NUM             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    BOOL            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    LIST            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    NUMBER          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    STRING          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    TRUE            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    FALSE           reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    SIZE            reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    REMOVE          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    HAS             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    LBRACKET        reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    END             reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    RBRACE          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    RETURN          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 46 (primary_exp -> LPAREN exp RPAREN .)


state 91

    (47) var -> type ID COLON . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 111
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 92

    (31) loop -> LOOP LPAREN ID . IN range RPAREN LBRACE content RBRACE

    IN              shift and go to state 112


state 93

    (28) conditional -> IF LPAREN exp . RPAREN LBRACE content RBRACE
    (29) conditional -> IF LPAREN exp . RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> IF LPAREN exp . RPAREN LBRACE content RBRACE ELSE conditional
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 94

    (78) list_assign -> id LBRACKET exp . RBRACKET COLON exp
    (75) read_list_item -> id LBRACKET exp . RBRACKET
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RBRACKET        shift and go to state 114
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 95

    (69) list -> LBRACKET list_content RBRACKET .

    PLUS            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    MINUS           reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    MULTIPLY        reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    DIVIDE          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    AND             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    OR              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    LT              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    GT              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    LE              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    GE              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    EQ              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    NE              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    FUNC            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    LOOP            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    IF              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    ID              reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    ADD             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    CONSOLE         reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    NOT             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    LPAREN          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    STR             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    NUM             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    BOOL            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    LIST            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    NUMBER          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    STRING          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    TRUE            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    FALSE           reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    SIZE            reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    REMOVE          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    HAS             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    LBRACKET        reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    END             reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    RBRACE          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    RETURN          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    RPAREN          reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    RBRACKET        reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)
    COMMA           reduce using rule 69 (list -> LBRACKET list_content RBRACKET .)


state 96

    (71) list_content -> list_content COMMA . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 115
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 97

    (73) add_list_item -> ADD LPAREN exp . COMMA exp RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    COMMA           shift and go to state 116
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 98

    (16) console -> CONSOLE LPAREN args . RPAREN
    (49) args -> args . COMMA exp

    RPAREN          shift and go to state 117
    COMMA           shift and go to state 110


state 99

    (68) type -> LIST LT type . GT

    GT              shift and go to state 118


state 100

    (74) len_list_item -> SIZE LPAREN exp . RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 119
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 101

    (76) remove_list_item -> REMOVE LPAREN exp . RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 120
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 102

    (77) has_list_item -> HAS LPAREN exp . COMMA primitive RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    COMMA           shift and go to state 121
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 103

    (75) read_list_item -> id LBRACKET exp . RBRACKET
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RBRACKET        shift and go to state 122
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 104

    (17) function -> FUNC ID LPAREN opt_param_list . RPAREN LBRACE content RBRACE
    (18) function_return -> FUNC ID LPAREN opt_param_list . RPAREN COLON type LBRACE content RETURN exp RBRACE

    RPAREN          shift and go to state 123


state 105

    (23) param -> type . ID opt_default

    ID              shift and go to state 124


state 106

    (19) opt_param_list -> param_list .
    (21) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 19 (opt_param_list -> param_list .)
    COMMA           shift and go to state 125


state 107

    (20) opt_param_list -> empty .

    RPAREN          reduce using rule 20 (opt_param_list -> empty .)


state 108

    (22) param_list -> param .

    COMMA           reduce using rule 22 (param_list -> param .)
    RPAREN          reduce using rule 22 (param_list -> param .)


state 109

    (26) call_func -> ID LPAREN args RPAREN .

    PLUS            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    MULTIPLY        reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    AND             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    OR              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    LT              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    GT              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    LE              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    GE              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    EQ              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    NE              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    FUNC            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    LOOP            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    IF              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    ID              reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    ADD             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    CONSOLE         reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    NOT             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    LPAREN          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    STR             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    NUM             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    BOOL            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    LIST            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    NUMBER          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    STRING          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    TRUE            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    FALSE           reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    SIZE            reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    REMOVE          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    HAS             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    LBRACKET        reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    END             reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    RBRACE          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    RETURN          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 26 (call_func -> ID LPAREN args RPAREN .)


state 110

    (49) args -> args COMMA . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 126
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 111

    (47) var -> type ID COLON exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    FUNC            reduce using rule 47 (var -> type ID COLON exp .)
    LOOP            reduce using rule 47 (var -> type ID COLON exp .)
    IF              reduce using rule 47 (var -> type ID COLON exp .)
    ID              reduce using rule 47 (var -> type ID COLON exp .)
    ADD             reduce using rule 47 (var -> type ID COLON exp .)
    CONSOLE         reduce using rule 47 (var -> type ID COLON exp .)
    NOT             reduce using rule 47 (var -> type ID COLON exp .)
    LPAREN          reduce using rule 47 (var -> type ID COLON exp .)
    STR             reduce using rule 47 (var -> type ID COLON exp .)
    NUM             reduce using rule 47 (var -> type ID COLON exp .)
    BOOL            reduce using rule 47 (var -> type ID COLON exp .)
    LIST            reduce using rule 47 (var -> type ID COLON exp .)
    NUMBER          reduce using rule 47 (var -> type ID COLON exp .)
    STRING          reduce using rule 47 (var -> type ID COLON exp .)
    TRUE            reduce using rule 47 (var -> type ID COLON exp .)
    FALSE           reduce using rule 47 (var -> type ID COLON exp .)
    SIZE            reduce using rule 47 (var -> type ID COLON exp .)
    REMOVE          reduce using rule 47 (var -> type ID COLON exp .)
    HAS             reduce using rule 47 (var -> type ID COLON exp .)
    LBRACKET        reduce using rule 47 (var -> type ID COLON exp .)
    END             reduce using rule 47 (var -> type ID COLON exp .)
    RBRACE          reduce using rule 47 (var -> type ID COLON exp .)
    RETURN          reduce using rule 47 (var -> type ID COLON exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 112

    (31) loop -> LOOP LPAREN ID IN . range RPAREN LBRACE content RBRACE
    (32) range -> . RANGE LPAREN exp COMMA exp RPAREN
    (33) range -> . RANGE LPAREN exp RPAREN
    (34) range -> . RANGE LPAREN exp COMMA exp COMMA exp RPAREN

    RANGE           shift and go to state 128

    range                          shift and go to state 127

state 113

    (28) conditional -> IF LPAREN exp RPAREN . LBRACE content RBRACE
    (29) conditional -> IF LPAREN exp RPAREN . LBRACE content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> IF LPAREN exp RPAREN . LBRACE content RBRACE ELSE conditional

    LBRACE          shift and go to state 129


state 114

    (78) list_assign -> id LBRACKET exp RBRACKET . COLON exp
    (75) read_list_item -> id LBRACKET exp RBRACKET .

    COLON           shift and go to state 130
    PLUS            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    MULTIPLY        reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    AND             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    OR              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LT              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    GT              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LE              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    GE              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    EQ              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NE              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    FUNC            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LOOP            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    IF              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    ID              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    ADD             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    CONSOLE         reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NOT             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    STR             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NUM             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    BOOL            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LIST            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NUMBER          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    STRING          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    TRUE            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    FALSE           reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    SIZE            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    REMOVE          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    HAS             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LBRACKET        reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    END             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    RBRACE          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    RETURN          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)


state 115

    (71) list_content -> list_content COMMA exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RBRACKET        reduce using rule 71 (list_content -> list_content COMMA exp .)
    COMMA           reduce using rule 71 (list_content -> list_content COMMA exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 116

    (73) add_list_item -> ADD LPAREN exp COMMA . exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 131
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 117

    (16) console -> CONSOLE LPAREN args RPAREN .

    FUNC            reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    LOOP            reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    IF              reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    ID              reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    ADD             reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    CONSOLE         reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    NOT             reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    LPAREN          reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    STR             reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    NUM             reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    BOOL            reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    LIST            reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    NUMBER          reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    STRING          reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    TRUE            reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    FALSE           reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    SIZE            reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    REMOVE          reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    HAS             reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    LBRACKET        reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    END             reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    RBRACE          reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)
    RETURN          reduce using rule 16 (console -> CONSOLE LPAREN args RPAREN .)


state 118

    (68) type -> LIST LT type GT .

    ID              reduce using rule 68 (type -> LIST LT type GT .)
    GT              reduce using rule 68 (type -> LIST LT type GT .)
    LBRACE          reduce using rule 68 (type -> LIST LT type GT .)


state 119

    (74) len_list_item -> SIZE LPAREN exp RPAREN .

    PLUS            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    MINUS           reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    AND             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    OR              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    LT              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    GT              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    LE              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    GE              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    EQ              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    NE              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    FUNC            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    LOOP            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    IF              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    ID              reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    ADD             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    CONSOLE         reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    NOT             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    LPAREN          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    STR             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    NUM             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    BOOL            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    LIST            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    NUMBER          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    STRING          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    TRUE            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    FALSE           reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    SIZE            reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    REMOVE          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    HAS             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    LBRACKET        reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    END             reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    RBRACE          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    RETURN          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    RPAREN          reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)
    COMMA           reduce using rule 74 (len_list_item -> SIZE LPAREN exp RPAREN .)


state 120

    (76) remove_list_item -> REMOVE LPAREN exp RPAREN .

    PLUS            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    MINUS           reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    MULTIPLY        reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    DIVIDE          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    AND             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    OR              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    LT              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    GT              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    LE              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    GE              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    EQ              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    NE              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    FUNC            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    LOOP            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    IF              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    ID              reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    ADD             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    CONSOLE         reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    NOT             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    LPAREN          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    STR             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    NUM             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    BOOL            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    LIST            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    NUMBER          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    STRING          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    TRUE            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    FALSE           reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    SIZE            reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    REMOVE          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    HAS             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    LBRACKET        reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    END             reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    RBRACE          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    RETURN          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    RPAREN          reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)
    COMMA           reduce using rule 76 (remove_list_item -> REMOVE LPAREN exp RPAREN .)


state 121

    (77) has_list_item -> HAS LPAREN exp COMMA . primitive RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE

    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46

    primitive                      shift and go to state 132

state 122

    (75) read_list_item -> id LBRACKET exp RBRACKET .

    PLUS            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    MULTIPLY        reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    DIVIDE          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    AND             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    OR              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LT              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    GT              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LE              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    GE              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    EQ              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NE              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    FUNC            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LOOP            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    IF              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    ID              reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    ADD             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    CONSOLE         reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NOT             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    STR             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NUM             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    BOOL            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LIST            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    NUMBER          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    STRING          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    TRUE            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    FALSE           reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    SIZE            reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    REMOVE          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    HAS             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    LBRACKET        reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    END             reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    RBRACE          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    RETURN          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 75 (read_list_item -> id LBRACKET exp RBRACKET .)


state 123

    (17) function -> FUNC ID LPAREN opt_param_list RPAREN . LBRACE content RBRACE
    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN . COLON type LBRACE content RETURN exp RBRACE

    LBRACE          shift and go to state 133
    COLON           shift and go to state 134


state 124

    (23) param -> type ID . opt_default
    (24) opt_default -> . COLON exp
    (25) opt_default -> . empty
    (83) empty -> .

    COLON           shift and go to state 136
    COMMA           reduce using rule 83 (empty -> .)
    RPAREN          reduce using rule 83 (empty -> .)

    opt_default                    shift and go to state 135
    empty                          shift and go to state 137

state 125

    (21) param_list -> param_list COMMA . param
    (23) param -> . type ID opt_default
    (65) type -> . STR
    (66) type -> . NUM
    (67) type -> . BOOL
    (68) type -> . LIST LT type GT

    STR             shift and go to state 39
    NUM             shift and go to state 40
    BOOL            shift and go to state 41
    LIST            shift and go to state 42

    param                          shift and go to state 138
    type                           shift and go to state 105

state 126

    (49) args -> args COMMA exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          reduce using rule 49 (args -> args COMMA exp .)
    COMMA           reduce using rule 49 (args -> args COMMA exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 127

    (31) loop -> LOOP LPAREN ID IN range . RPAREN LBRACE content RBRACE

    RPAREN          shift and go to state 139


state 128

    (32) range -> RANGE . LPAREN exp COMMA exp RPAREN
    (33) range -> RANGE . LPAREN exp RPAREN
    (34) range -> RANGE . LPAREN exp COMMA exp COMMA exp RPAREN

    LPAREN          shift and go to state 140


state 129

    (28) conditional -> IF LPAREN exp RPAREN LBRACE . content RBRACE
    (29) conditional -> IF LPAREN exp RPAREN LBRACE . content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> IF LPAREN exp RPAREN LBRACE . content RBRACE ELSE conditional
    (2) content -> . statement_list
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . empty
    (83) empty -> .

    FUNC            reduce using rule 83 (empty -> .)
    LOOP            reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    ADD             reduce using rule 83 (empty -> .)
    CONSOLE         reduce using rule 83 (empty -> .)
    NOT             reduce using rule 83 (empty -> .)
    LPAREN          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    NUM             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    LIST            reduce using rule 83 (empty -> .)
    NUMBER          reduce using rule 83 (empty -> .)
    STRING          reduce using rule 83 (empty -> .)
    TRUE            reduce using rule 83 (empty -> .)
    FALSE           reduce using rule 83 (empty -> .)
    SIZE            reduce using rule 83 (empty -> .)
    REMOVE          reduce using rule 83 (empty -> .)
    HAS             reduce using rule 83 (empty -> .)
    LBRACKET        reduce using rule 83 (empty -> .)
    RBRACE          reduce using rule 83 (empty -> .)

    content                        shift and go to state 141
    statement_list                 shift and go to state 4
    empty                          shift and go to state 5

state 130

    (78) list_assign -> id LBRACKET exp RBRACKET COLON . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    id                             shift and go to state 64
    exp                            shift and go to state 142
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 131

    (73) add_list_item -> ADD LPAREN exp COMMA exp . RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 143
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 132

    (77) has_list_item -> HAS LPAREN exp COMMA primitive . RPAREN

    RPAREN          shift and go to state 144


state 133

    (17) function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE . content RBRACE
    (2) content -> . statement_list
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . empty
    (83) empty -> .

    FUNC            reduce using rule 83 (empty -> .)
    LOOP            reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    ADD             reduce using rule 83 (empty -> .)
    CONSOLE         reduce using rule 83 (empty -> .)
    NOT             reduce using rule 83 (empty -> .)
    LPAREN          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    NUM             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    LIST            reduce using rule 83 (empty -> .)
    NUMBER          reduce using rule 83 (empty -> .)
    STRING          reduce using rule 83 (empty -> .)
    TRUE            reduce using rule 83 (empty -> .)
    FALSE           reduce using rule 83 (empty -> .)
    SIZE            reduce using rule 83 (empty -> .)
    REMOVE          reduce using rule 83 (empty -> .)
    HAS             reduce using rule 83 (empty -> .)
    LBRACKET        reduce using rule 83 (empty -> .)
    RBRACE          reduce using rule 83 (empty -> .)

    content                        shift and go to state 145
    statement_list                 shift and go to state 4
    empty                          shift and go to state 5

state 134

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON . type LBRACE content RETURN exp RBRACE
    (65) type -> . STR
    (66) type -> . NUM
    (67) type -> . BOOL
    (68) type -> . LIST LT type GT

    STR             shift and go to state 39
    NUM             shift and go to state 40
    BOOL            shift and go to state 41
    LIST            shift and go to state 42

    type                           shift and go to state 146

state 135

    (23) param -> type ID opt_default .

    COMMA           reduce using rule 23 (param -> type ID opt_default .)
    RPAREN          reduce using rule 23 (param -> type ID opt_default .)


state 136

    (24) opt_default -> COLON . exp
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 147
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 137

    (25) opt_default -> empty .

    COMMA           reduce using rule 25 (opt_default -> empty .)
    RPAREN          reduce using rule 25 (opt_default -> empty .)


state 138

    (21) param_list -> param_list COMMA param .

    COMMA           reduce using rule 21 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 21 (param_list -> param_list COMMA param .)


state 139

    (31) loop -> LOOP LPAREN ID IN range RPAREN . LBRACE content RBRACE

    LBRACE          shift and go to state 148


state 140

    (32) range -> RANGE LPAREN . exp COMMA exp RPAREN
    (33) range -> RANGE LPAREN . exp RPAREN
    (34) range -> RANGE LPAREN . exp COMMA exp COMMA exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 149
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 141

    (28) conditional -> IF LPAREN exp RPAREN LBRACE content . RBRACE
    (29) conditional -> IF LPAREN exp RPAREN LBRACE content . RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> IF LPAREN exp RPAREN LBRACE content . RBRACE ELSE conditional

    RBRACE          shift and go to state 150


state 142

    (78) list_assign -> id LBRACKET exp RBRACKET COLON exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    FUNC            reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    LOOP            reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    IF              reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    ID              reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    ADD             reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    CONSOLE         reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    NOT             reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    LPAREN          reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    STR             reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    NUM             reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    BOOL            reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    LIST            reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    NUMBER          reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    STRING          reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    TRUE            reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    FALSE           reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    SIZE            reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    REMOVE          reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    HAS             reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    LBRACKET        reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    END             reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    RBRACE          reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    RETURN          reduce using rule 78 (list_assign -> id LBRACKET exp RBRACKET COLON exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 143

    (73) add_list_item -> ADD LPAREN exp COMMA exp RPAREN .

    FUNC            reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    LOOP            reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    IF              reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    ID              reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    ADD             reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    CONSOLE         reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    NOT             reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    LPAREN          reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    STR             reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    NUM             reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    BOOL            reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    LIST            reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    NUMBER          reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    STRING          reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    TRUE            reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    FALSE           reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    SIZE            reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    REMOVE          reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    HAS             reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    LBRACKET        reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    END             reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    RBRACE          reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)
    RETURN          reduce using rule 73 (add_list_item -> ADD LPAREN exp COMMA exp RPAREN .)


state 144

    (77) has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .

    PLUS            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    MINUS           reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    MULTIPLY        reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    DIVIDE          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    AND             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    OR              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    LT              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    GT              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    LE              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    GE              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    EQ              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    NE              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    FUNC            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    LOOP            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    IF              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    ID              reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    ADD             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    CONSOLE         reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    NOT             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    LPAREN          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    STR             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    NUM             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    BOOL            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    LIST            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    NUMBER          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    STRING          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    TRUE            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    FALSE           reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    SIZE            reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    REMOVE          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    HAS             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    LBRACKET        reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    END             reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    RBRACE          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    RETURN          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    RPAREN          reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    RBRACKET        reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)
    COMMA           reduce using rule 77 (has_list_item -> HAS LPAREN exp COMMA primitive RPAREN .)


state 145

    (17) function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 151


state 146

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type . LBRACE content RETURN exp RBRACE

    LBRACE          shift and go to state 152


state 147

    (24) opt_default -> COLON exp .
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    COMMA           reduce using rule 24 (opt_default -> COLON exp .)
    RPAREN          reduce using rule 24 (opt_default -> COLON exp .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 148

    (31) loop -> LOOP LPAREN ID IN range RPAREN LBRACE . content RBRACE
    (2) content -> . statement_list
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . empty
    (83) empty -> .

    FUNC            reduce using rule 83 (empty -> .)
    LOOP            reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    ADD             reduce using rule 83 (empty -> .)
    CONSOLE         reduce using rule 83 (empty -> .)
    NOT             reduce using rule 83 (empty -> .)
    LPAREN          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    NUM             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    LIST            reduce using rule 83 (empty -> .)
    NUMBER          reduce using rule 83 (empty -> .)
    STRING          reduce using rule 83 (empty -> .)
    TRUE            reduce using rule 83 (empty -> .)
    FALSE           reduce using rule 83 (empty -> .)
    SIZE            reduce using rule 83 (empty -> .)
    REMOVE          reduce using rule 83 (empty -> .)
    HAS             reduce using rule 83 (empty -> .)
    LBRACKET        reduce using rule 83 (empty -> .)
    RBRACE          reduce using rule 83 (empty -> .)

    content                        shift and go to state 153
    statement_list                 shift and go to state 4
    empty                          shift and go to state 5

state 149

    (32) range -> RANGE LPAREN exp . COMMA exp RPAREN
    (33) range -> RANGE LPAREN exp . RPAREN
    (34) range -> RANGE LPAREN exp . COMMA exp COMMA exp RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    COMMA           shift and go to state 154
    RPAREN          shift and go to state 155
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 150

    (28) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .
    (29) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE . ELSE LBRACE content RBRACE
    (30) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE . ELSE conditional

    FUNC            reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    LOOP            reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    IF              reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    ID              reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    ADD             reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    CONSOLE         reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    NOT             reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    LPAREN          reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    STR             reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    NUM             reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    BOOL            reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    LIST            reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    NUMBER          reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    STRING          reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    TRUE            reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    FALSE           reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    SIZE            reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    REMOVE          reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    HAS             reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    LBRACKET        reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    END             reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    RBRACE          reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    RETURN          reduce using rule 28 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE .)
    ELSE            shift and go to state 156


state 151

    (17) function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .

    FUNC            reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    LOOP            reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    IF              reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    ID              reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    ADD             reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    CONSOLE         reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    NOT             reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    LPAREN          reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    STR             reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    NUM             reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    BOOL            reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    LIST            reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    NUMBER          reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    STRING          reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    TRUE            reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    FALSE           reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    SIZE            reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    REMOVE          reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    HAS             reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    LBRACKET        reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    END             reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    RBRACE          reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)
    RETURN          reduce using rule 17 (function -> FUNC ID LPAREN opt_param_list RPAREN LBRACE content RBRACE .)


state 152

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE . content RETURN exp RBRACE
    (2) content -> . statement_list
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . empty
    (83) empty -> .

    FUNC            reduce using rule 83 (empty -> .)
    LOOP            reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    ADD             reduce using rule 83 (empty -> .)
    CONSOLE         reduce using rule 83 (empty -> .)
    NOT             reduce using rule 83 (empty -> .)
    LPAREN          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    NUM             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    LIST            reduce using rule 83 (empty -> .)
    NUMBER          reduce using rule 83 (empty -> .)
    STRING          reduce using rule 83 (empty -> .)
    TRUE            reduce using rule 83 (empty -> .)
    FALSE           reduce using rule 83 (empty -> .)
    SIZE            reduce using rule 83 (empty -> .)
    REMOVE          reduce using rule 83 (empty -> .)
    HAS             reduce using rule 83 (empty -> .)
    LBRACKET        reduce using rule 83 (empty -> .)
    RETURN          reduce using rule 83 (empty -> .)

    content                        shift and go to state 157
    statement_list                 shift and go to state 4
    empty                          shift and go to state 5

state 153

    (31) loop -> LOOP LPAREN ID IN range RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 158


state 154

    (32) range -> RANGE LPAREN exp COMMA . exp RPAREN
    (34) range -> RANGE LPAREN exp COMMA . exp COMMA exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 159
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 155

    (33) range -> RANGE LPAREN exp RPAREN .

    RPAREN          reduce using rule 33 (range -> RANGE LPAREN exp RPAREN .)


state 156

    (29) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE . LBRACE content RBRACE
    (30) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE . conditional
    (28) conditional -> . IF LPAREN exp RPAREN LBRACE content RBRACE
    (29) conditional -> . IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE
    (30) conditional -> . IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional

    LBRACE          shift and go to state 160
    IF              shift and go to state 26

    conditional                    shift and go to state 161

state 157

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content . RETURN exp RBRACE

    RETURN          shift and go to state 162


state 158

    (31) loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .

    FUNC            reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    LOOP            reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    IF              reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    ID              reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    ADD             reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    CONSOLE         reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    NOT             reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    LPAREN          reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    STR             reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    NUM             reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    BOOL            reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    LIST            reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    NUMBER          reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    STRING          reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    TRUE            reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    FALSE           reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    SIZE            reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    REMOVE          reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    HAS             reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    LBRACKET        reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    END             reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    RBRACE          reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)
    RETURN          reduce using rule 31 (loop -> LOOP LPAREN ID IN range RPAREN LBRACE content RBRACE .)


state 159

    (32) range -> RANGE LPAREN exp COMMA exp . RPAREN
    (34) range -> RANGE LPAREN exp COMMA exp . COMMA exp RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 164
    COMMA           shift and go to state 163
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 160

    (29) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE . content RBRACE
    (2) content -> . statement_list
    (3) statement_list -> . statement_list statement
    (4) statement_list -> . empty
    (83) empty -> .

    FUNC            reduce using rule 83 (empty -> .)
    LOOP            reduce using rule 83 (empty -> .)
    IF              reduce using rule 83 (empty -> .)
    ID              reduce using rule 83 (empty -> .)
    ADD             reduce using rule 83 (empty -> .)
    CONSOLE         reduce using rule 83 (empty -> .)
    NOT             reduce using rule 83 (empty -> .)
    LPAREN          reduce using rule 83 (empty -> .)
    STR             reduce using rule 83 (empty -> .)
    NUM             reduce using rule 83 (empty -> .)
    BOOL            reduce using rule 83 (empty -> .)
    LIST            reduce using rule 83 (empty -> .)
    NUMBER          reduce using rule 83 (empty -> .)
    STRING          reduce using rule 83 (empty -> .)
    TRUE            reduce using rule 83 (empty -> .)
    FALSE           reduce using rule 83 (empty -> .)
    SIZE            reduce using rule 83 (empty -> .)
    REMOVE          reduce using rule 83 (empty -> .)
    HAS             reduce using rule 83 (empty -> .)
    LBRACKET        reduce using rule 83 (empty -> .)
    RBRACE          reduce using rule 83 (empty -> .)

    content                        shift and go to state 165
    statement_list                 shift and go to state 4
    empty                          shift and go to state 5

state 161

    (30) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .

    FUNC            reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    LOOP            reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    IF              reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    ID              reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    ADD             reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    CONSOLE         reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    NOT             reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    LPAREN          reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    STR             reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    NUM             reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    BOOL            reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    LIST            reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    NUMBER          reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    STRING          reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    TRUE            reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    FALSE           reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    SIZE            reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    REMOVE          reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    HAS             reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    LBRACKET        reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    END             reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    RBRACE          reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)
    RETURN          reduce using rule 30 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE conditional .)


state 162

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN . exp RBRACE
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 166
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 163

    (34) range -> RANGE LPAREN exp COMMA exp COMMA . exp RPAREN
    (35) exp -> . exp operator exp
    (36) exp -> . op_bool_un exp
    (37) exp -> . primary_exp
    (64) op_bool_un -> . NOT
    (38) primary_exp -> . call_func
    (39) primary_exp -> . primitive
    (40) primary_exp -> . id
    (41) primary_exp -> . len_list_item
    (42) primary_exp -> . remove_list_item
    (43) primary_exp -> . read_list_item
    (44) primary_exp -> . has_list_item
    (45) primary_exp -> . list
    (46) primary_exp -> . LPAREN exp RPAREN
    (26) call_func -> . ID LPAREN args RPAREN
    (27) call_func -> . ID LPAREN RPAREN
    (79) primitive -> . NUMBER
    (80) primitive -> . STRING
    (81) primitive -> . TRUE
    (82) primitive -> . FALSE
    (51) id -> . ID
    (74) len_list_item -> . SIZE LPAREN exp RPAREN
    (76) remove_list_item -> . REMOVE LPAREN exp RPAREN
    (75) read_list_item -> . id LBRACKET exp RBRACKET
    (77) has_list_item -> . HAS LPAREN exp COMMA primitive RPAREN
    (69) list -> . LBRACKET list_content RBRACKET
    (70) list -> . LBRACKET RBRACKET

    NOT             shift and go to state 31
    LPAREN          shift and go to state 23
    ID              shift and go to state 65
    NUMBER          shift and go to state 43
    STRING          shift and go to state 44
    TRUE            shift and go to state 45
    FALSE           shift and go to state 46
    SIZE            shift and go to state 47
    REMOVE          shift and go to state 48
    HAS             shift and go to state 49
    LBRACKET        shift and go to state 28

    exp                            shift and go to state 167
    op_bool_un                     shift and go to state 19
    primary_exp                    shift and go to state 20
    call_func                      shift and go to state 32
    primitive                      shift and go to state 33
    id                             shift and go to state 64
    len_list_item                  shift and go to state 34
    remove_list_item               shift and go to state 35
    read_list_item                 shift and go to state 36
    has_list_item                  shift and go to state 37
    list                           shift and go to state 38

state 164

    (32) range -> RANGE LPAREN exp COMMA exp RPAREN .

    RPAREN          reduce using rule 32 (range -> RANGE LPAREN exp COMMA exp RPAREN .)


state 165

    (29) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content . RBRACE

    RBRACE          shift and go to state 168


state 166

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp . RBRACE
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RBRACE          shift and go to state 169
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 167

    (34) range -> RANGE LPAREN exp COMMA exp COMMA exp . RPAREN
    (35) exp -> exp . operator exp
    (52) operator -> . PLUS
    (53) operator -> . MINUS
    (54) operator -> . MULTIPLY
    (55) operator -> . DIVIDE
    (56) operator -> . AND
    (57) operator -> . OR
    (58) operator -> . LT
    (59) operator -> . GT
    (60) operator -> . LE
    (61) operator -> . GE
    (62) operator -> . EQ
    (63) operator -> . NE

    RPAREN          shift and go to state 170
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    MULTIPLY        shift and go to state 53
    DIVIDE          shift and go to state 54
    AND             shift and go to state 55
    OR              shift and go to state 56
    LT              shift and go to state 57
    GT              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60
    EQ              shift and go to state 61
    NE              shift and go to state 62

    operator                       shift and go to state 50

state 168

    (29) conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .

    FUNC            reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    LOOP            reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    IF              reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    ID              reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    ADD             reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    CONSOLE         reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    NOT             reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    LPAREN          reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    STR             reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    NUM             reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    BOOL            reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    LIST            reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    NUMBER          reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    STRING          reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    TRUE            reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    FALSE           reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    SIZE            reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    REMOVE          reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    HAS             reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    LBRACKET        reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    END             reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    RBRACE          reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)
    RETURN          reduce using rule 29 (conditional -> IF LPAREN exp RPAREN LBRACE content RBRACE ELSE LBRACE content RBRACE .)


state 169

    (18) function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .

    FUNC            reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    LOOP            reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    IF              reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    ID              reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    ADD             reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    CONSOLE         reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    NOT             reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    LPAREN          reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    STR             reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    NUM             reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    BOOL            reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    LIST            reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    NUMBER          reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    STRING          reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    TRUE            reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    FALSE           reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    SIZE            reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    REMOVE          reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    HAS             reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    LBRACKET        reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    END             reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    RBRACE          reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)
    RETURN          reduce using rule 18 (function_return -> FUNC ID LPAREN opt_param_list RPAREN COLON type LBRACE content RETURN exp RBRACE .)


state 170

    (34) range -> RANGE LPAREN exp COMMA exp COMMA exp RPAREN .

    RPAREN          reduce using rule 34 (range -> RANGE LPAREN exp COMMA exp COMMA exp RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 27 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 63 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 63 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for LT in state 63 resolved as shift
WARNING: shift/reduce conflict for GT in state 63 resolved as shift
WARNING: shift/reduce conflict for LE in state 63 resolved as shift
WARNING: shift/reduce conflict for GE in state 63 resolved as shift
WARNING: shift/reduce conflict for EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for NE in state 63 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 64 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
